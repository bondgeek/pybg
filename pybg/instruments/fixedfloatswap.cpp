/* Generated by Cython 0.16 on Sun Jul 22 16:12:22 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pybg__instruments__fixedfloatswap
#define __PYX_HAVE_API__pybg__instruments__fixedfloatswap
#include "boost/shared_ptr.hpp"
#include "ql/handle.hpp"
#include <string>
#include "ql/time/frequency.hpp"
#include "ql/time/timeunit.hpp"
#include "ql/time/period.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "ostream"
#include "ql/time/weekday.hpp"
#include "ql/time/date.hpp"
#include "string"
#include "ql/time/businessdayconvention.hpp"
#include "ql/time/calendar.hpp"
#include "ql/time/calendars/target.hpp"
#include "ql/time/daycounter.hpp"
#include "ql/time/daycounters/thirty360.hpp"
#include "ql/time/daycounters/actual360.hpp"
#include "ql/time/daycounters/actual365fixed.hpp"
#include "ql/time/daycounters/business252.hpp"
#include "ql/time/daycounters/one.hpp"
#include "ql/time/daycounters/simpledaycounter.hpp"
#include "ql/currency.hpp"
#include "ql/currencies/america.hpp"
#include "ql/currencies/europe.hpp"
#include "ql/quote.hpp"
#include "ql/quotes/simplequote.hpp"
#include "ql/compounding.hpp"
#include "ql/termstructures/yieldtermstructure.hpp"
#include "ql/termstructures/yield/flatforward.hpp"
#include "ql/index.hpp"
#include "ql/indexes/interestrateindex.hpp"
#include "ql/indexes/iborindex.hpp"
#include "bg/indexbase.hpp"
#include "ql/indexes/ibor/libor.hpp"
#include "ql/indexes/ibor/usdlibor.hpp"
#include "ql/indexes/ibor/euribor.hpp"
#include "boost/optional.hpp"
#include "ql/event.hpp"
#include "ql/cashflow.hpp"
#include "ql/cashflows/simplecashflow.hpp"
#include <utility>
#include <map>
#include "bg/curvebase.hpp"
#include "bg/curves/ratehelpercurve.hpp"
#include "bg/instruments/fixedfloatswap.hpp"
#include "bg/swaptype.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "fixedfloatswap.pyx",
  "date.pxd",
  "cashflow.pxd",
  "curves.pxd",
  "daycounter.pxd",
};

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_7_period_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_7_period_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_7_period_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_7_period_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_5_date_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_5_date_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_5_date_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_5_date_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_9_calendar_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_9_calendar_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_11_daycounter_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_9_currency_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_9_currency_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_9_currency_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_9_currency_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_quote_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_quote_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_quote_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_quote_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_10_indexbase_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_10_indexbase_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_10_indexbase_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_10_indexbase_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_10_indexbase_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_10_indexbase_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_10_indexbase_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_10_indexbase_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_10_indexbase_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_10_indexbase_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_10_indexbase_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_10_indexbase_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_10_indexbase_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_10_indexbase_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_6_libor_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_6_libor_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_6_libor_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_6_libor_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_6_libor_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_6_libor_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_6_libor_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_6_libor_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_9_cashflow_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_9_cashflow_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_9_cashflow_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_9_cashflow_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_9_cashflow_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_cashflow_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_cashflow_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_9_cashflow_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_8cashflow_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_8cashflow_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_8cashflow_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_8cashflow_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_8cashflow_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_8cashflow_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_8cashflow_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_8cashflow_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_7_curves_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_7_curves_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_7_curves_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_7_curves_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_7_curves_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_7_curves_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_7_curves_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_7_curves_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_7_curves_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_7_curves_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_7_curves_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_7_curves_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_7_curves_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_7_curves_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_11instruments_15_fixedfloatswap_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_11instruments_15_fixedfloatswap_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_11instruments_15_fixedfloatswap_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_11instruments_15_fixedfloatswap_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_11instruments_15_fixedfloatswap_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_15_fixedfloatswap_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_15_fixedfloatswap_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_11instruments_15_fixedfloatswap_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_11instruments_14fixedfloatswap_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_11instruments_14fixedfloatswap_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_11instruments_14fixedfloatswap_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_11instruments_14fixedfloatswap_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_11instruments_14fixedfloatswap_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_14fixedfloatswap_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_14fixedfloatswap_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_11instruments_14fixedfloatswap_DiscountFactor;

/*--- Type declarations ---*/
struct __pyx_obj_4pybg_8quantlib_8cashflow_CashFlow;
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap;
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap;
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter;
struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleCashFlow;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period;
struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleLeg;
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap;
struct __pyx_obj_4pybg_6curves_CurveBase;
struct __pyx_obj_4pybg_6curves_RateHelperCurve;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date;

/* "pybg/instruments/fixedfloatswap.pyx":37
 * cimport pybg._curves as _curves
 * 
 * cdef public enum SwapPayType:             # <<<<<<<<<<<<<<
 *     FixedPayer    = _fixedfloatswap.FixedPayer
 *     FixedReceiver = _fixedfloatswap.FixedReceiver
 */
enum SwapPayType {

  /* "pybg/instruments/fixedfloatswap.pyx":39
 * cdef public enum SwapPayType:
 *     FixedPayer    = _fixedfloatswap.FixedPayer
 *     FixedReceiver = _fixedfloatswap.FixedReceiver             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FixedPayer = bondgeek::FixedPayer,
  FixedReceiver = bondgeek::FixedReceiver
};

/* "pybg/quantlib/cashflow.pxd":8
 * from libcpp.vector cimport vector
 * 
 * cdef class CashFlow:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_cf.CashFlow]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_8cashflow_CashFlow {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::CashFlow> *_thisptr;
};


/* "pybg/instruments/fixedfloatswap.pxd":14
 * from pybg.quantlib.indexes._ibor_index cimport IborIndex
 * 
 * cdef class LiborSwap:             # <<<<<<<<<<<<<<
 *     '''Libor Swap factory
 * 
 */
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::FixedFloatSwap> *_thisptr;
};


/* "pybg/instruments/fixedfloatswap.pxd":22
 *     cdef shared_ptr[_fixedfloatswap.FixedFloatSwap]* _thisptr
 * 
 * cdef class USDLiborSwap(LiborSwap):             # <<<<<<<<<<<<<<
 *     '''USD Libor Swap
 * 
 */
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap {
  struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap __pyx_base;
  bondgeek::SwapType<QuantLib::USDLibor> *_swaptype;
};


/* "pybg/quantlib/time/daycounter.pxd":3
 * cimport pybg.quantlib.time._daycounter as _daycounter
 * 
 * cdef class DayCounter:             # <<<<<<<<<<<<<<
 * 
 *     cdef _daycounter.DayCounter* _thisptr
 */
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter {
  PyObject_HEAD
  QuantLib::DayCounter *_thisptr;
};


/* "pybg/quantlib/cashflow.pxd":11
 *     cdef shared_ptr[_cf.CashFlow]* _thisptr
 * 
 * cdef class SimpleCashFlow(CashFlow):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleCashFlow {
  struct __pyx_obj_4pybg_8quantlib_8cashflow_CashFlow __pyx_base;
};


/* "pybg/quantlib/time/date.pxd":17
 * 
 * 
 * cdef class Period:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Period> *_thisptr;
};


/* "pybg/quantlib/cashflow.pxd":14
 *     pass
 * 
 * cdef class SimpleLeg:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[vector[shared_ptr[_cf.CashFlow]]] *_thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleLeg {
  PyObject_HEAD
  boost::shared_ptr<std::vector<boost::shared_ptr<QuantLib::CashFlow> > > *_thisptr;
};


/* "pybg/instruments/fixedfloatswap.pxd":28
 *     cdef _fixedfloatswap.SwapType[ _libor.USDLibor]* _swaptype
 * 
 * cdef class EuriborSwap(LiborSwap):             # <<<<<<<<<<<<<<
 *     '''USD Libor Swap
 * 
 */
struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap {
  struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap __pyx_base;
  bondgeek::SwapType<QuantLib::Euribor> *_swaptype;
};


/* "pybg/curves.pxd":10
 * # Base curve abstract class
 * # Specific curve types, e.g. 'USDLiborCurve' should be sub-classed off this
 * cdef class CurveBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_curves.CurveBase]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_6curves_CurveBase {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::CurveBase> *_thisptr;
};


/* "pybg/curves.pxd":13
 *     cdef shared_ptr[_curves.CurveBase]* _thisptr
 * 
 * cdef class RateHelperCurve:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_curves.RateHelperCurve]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_6curves_RateHelperCurve {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::RateHelperCurve> *_thisptr;
};


/* "pybg/quantlib/time/date.pxd":20
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 * cdef class Date:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_date.Date]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Date> *_thisptr;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'pybg.quantlib.handle' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pybg.quantlib.time._period' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pybg.quantlib.time._date' */

/* Module declarations from 'pybg.quantlib.time._calendar' */

/* Module declarations from 'pybg.quantlib.time._daycounter' */

/* Module declarations from 'pybg.quantlib._currency' */

/* Module declarations from 'pybg.quantlib._quote' */

/* Module declarations from 'pybg.quantlib.termstructures.yields._flat_forward' */

/* Module declarations from 'pybg.quantlib._index' */

/* Module declarations from 'pybg.quantlib.indexes._interest_rate_index' */

/* Module declarations from 'pybg.quantlib.indexes._ibor_index' */

/* Module declarations from 'pybg.quantlib.time.date' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Period = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Date = 0;

/* Module declarations from 'pybg.ql' */
static PyObject *(*__pyx_f_4pybg_2ql__pydate_from_qldate)(QuantLib::Date); /*proto*/
static QuantLib::Date (*__pyx_f_4pybg_2ql__qldate_from_pydate)(PyObject *); /*proto*/

/* Module declarations from 'pybg._indexbase' */

/* Module declarations from 'pybg.quantlib.termstructures.yields' */

/* Module declarations from 'pybg.quantlib.termstructures' */

/* Module declarations from 'pybg.quantlib.time' */

/* Module declarations from 'pybg.quantlib.indexes._libor' */

/* Module declarations from 'pybg.quantlib.indexes._euribor' */

/* Module declarations from 'pybg.quantlib.indexes' */

/* Module declarations from 'pybg.quantlib._cashflow' */

/* Module declarations from 'pybg.quantlib.cashflow' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_8cashflow_CashFlow = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_8cashflow_SimpleCashFlow = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_8cashflow_SimpleLeg = 0;
static PyObject *(*__pyx_f_4pybg_8quantlib_8cashflow_leg_items)(std::vector<boost::shared_ptr<QuantLib::CashFlow> >); /*proto*/

/* Module declarations from 'pybg.quantlib' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'pybg._curves' */

/* Module declarations from 'pybg.instruments._fixedfloatswap' */

/* Module declarations from 'pybg.instruments' */

/* Module declarations from 'pybg.curves' */
static PyTypeObject *__pyx_ptype_4pybg_6curves_CurveBase = 0;
static PyTypeObject *__pyx_ptype_4pybg_6curves_RateHelperCurve = 0;

/* Module declarations from 'pybg' */

/* Module declarations from 'pybg.quantlib.time.daycounter' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = 0;

/* Module declarations from 'pybg.instruments.fixedfloatswap' */
static PyTypeObject *__pyx_ptype_4pybg_11instruments_14fixedfloatswap_LiborSwap = 0;
static PyTypeObject *__pyx_ptype_4pybg_11instruments_14fixedfloatswap_USDLiborSwap = 0;
static PyTypeObject *__pyx_ptype_4pybg_11instruments_14fixedfloatswap_EuriborSwap = 0;
#define __Pyx_MODULE_NAME "pybg.instruments.fixedfloatswap"
int __pyx_module_is_main_pybg__instruments__fixedfloatswap = 0;

/* Implementation of 'pybg.instruments.fixedfloatswap' */
static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap___cinit__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static void __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_2__dealloc__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__(CYTHON_UNUSED struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, CYTHON_UNUSED PyObject *__pyx_v_settle, CYTHON_UNUSED PyObject *__pyx_v_maturity, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, CYTHON_UNUSED enum SwapPayType __pyx_v_payerType, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, CYTHON_UNUSED PyObject *__pyx_v_fixedLegFrequency, CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, CYTHON_UNUSED PyObject *__pyx_v_fixedLegConvention, CYTHON_UNUSED PyObject *__pyx_v_floatingLegFrequency, CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, CYTHON_UNUSED PyObject *__pyx_v_floatingLegConvention); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self); /* proto */
static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap___init__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, PyObject *__pyx_v_settle, PyObject *__pyx_v_maturity, __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, enum SwapPayType __pyx_v_payerType, __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, PyObject *__pyx_v_fixedLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, PyObject *__pyx_v_fixedLegConvention, PyObject *__pyx_v_floatingLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, PyObject *__pyx_v_floatingLegConvention); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_2setEngine(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv); /* proto */
static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap___init__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, PyObject *__pyx_v_settle, PyObject *__pyx_v_maturity, __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, enum SwapPayType __pyx_v_payerType, __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, PyObject *__pyx_v_fixedLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, PyObject *__pyx_v_fixedLegConvention, PyObject *__pyx_v_floatingLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, PyObject *__pyx_v_floatingLegConvention); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_2setEngine(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv); /* proto */
static char __pyx_k_1[] = "floatingLegFrequency";
static char __pyx_k_2[] = "floatingLegDayCounter";
static char __pyx_k_3[] = "floatingLegConvention";
static char __pyx_k_4[] = "Abstract Base Class";
static char __pyx_k_17[] = "pybg.quantlib.time.daycounters.thirty360";
static char __pyx_k_18[] = "pybg.quantlib.time.calendar";
static char __pyx_k_19[] = "pybg.quantlib.time.api";
static char __pyx_k_20[] = "*";
static char __pyx_k__tenor[] = "tenor";
static char __pyx_k__Annual[] = "Annual";
static char __pyx_k__settle[] = "settle";
static char __pyx_k__EUROPEAN[] = "EUROPEAN";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__maturity[] = "maturity";
static char __pyx_k__notional[] = "notional";
static char __pyx_k__Actual360[] = "Actual360";
static char __pyx_k__Following[] = "Following";
static char __pyx_k__Quarterly[] = "Quarterly";
static char __pyx_k__Thirty360[] = "Thirty360";
static char __pyx_k__fixedRate[] = "fixedRate";
static char __pyx_k__payerType[] = "payerType";
static char __pyx_k__Semiannual[] = "Semiannual";
static char __pyx_k__Unadjusted[] = "Unadjusted";
static char __pyx_k__EUROBONDBASIS[] = "EUROBONDBASIS";
static char __pyx_k__floating_spread[] = "floating_spread";
static char __pyx_k__ModifiedFollowing[] = "ModifiedFollowing";
static char __pyx_k__fixedLegFrequency[] = "fixedLegFrequency";
static char __pyx_k__fixedLegConvention[] = "fixedLegConvention";
static char __pyx_k__fixedLegDayCounter[] = "fixedLegDayCounter";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s_17;
static PyObject *__pyx_n_s_18;
static PyObject *__pyx_n_s_19;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_n_s_20;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s__Actual360;
static PyObject *__pyx_n_s__Annual;
static PyObject *__pyx_n_s__EUROBONDBASIS;
static PyObject *__pyx_n_s__EUROPEAN;
static PyObject *__pyx_n_s__Following;
static PyObject *__pyx_n_s__ModifiedFollowing;
static PyObject *__pyx_n_s__Quarterly;
static PyObject *__pyx_n_s__Semiannual;
static PyObject *__pyx_n_s__Thirty360;
static PyObject *__pyx_n_s__Unadjusted;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__fixedLegConvention;
static PyObject *__pyx_n_s__fixedLegDayCounter;
static PyObject *__pyx_n_s__fixedLegFrequency;
static PyObject *__pyx_n_s__fixedRate;
static PyObject *__pyx_n_s__floating_spread;
static PyObject *__pyx_n_s__maturity;
static PyObject *__pyx_n_s__notional;
static PyObject *__pyx_n_s__payerType;
static PyObject *__pyx_n_s__settle;
static PyObject *__pyx_n_s__tenor;
static PyObject *__pyx_k_5;
static struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_k_6;
static PyObject *__pyx_k_7;
static PyObject *__pyx_k_8;
static struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_k_9;
static PyObject *__pyx_k_10;
static PyObject *__pyx_k_11;
static struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_k_12;
static PyObject *__pyx_k_13;
static PyObject *__pyx_k_14;
static struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_k_15;
static PyObject *__pyx_k_16;

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap___cinit__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":44
 * 
 * cdef class LiborSwap:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap___cinit__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":45
 * cdef class LiborSwap:
 *     def __cinit__(self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_thisptr = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_2__dealloc__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pybg/instruments/fixedfloatswap.pyx":47
 *         self._thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._thisptr is not NULL:
 *             del self._thisptr
 */

static void __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_2__dealloc__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":48
 * 
 *     def __dealloc__(self):
 *         if self._thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_thisptr != NULL);
  if (__pyx_t_1) {

    /* "pybg/instruments/fixedfloatswap.pyx":49
 *     def __dealloc__(self):
 *         if self._thisptr is not NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
    delete __pyx_v_self->_thisptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__[] = "Enter tenor as '3M'\n        \n        ";
struct wrapperbase __pyx_wrapperbase_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__;
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_tenor = 0;
  CYTHON_UNUSED PyObject *__pyx_v_settle = 0;
  CYTHON_UNUSED PyObject *__pyx_v_maturity = 0;
  CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate;
  CYTHON_UNUSED enum SwapPayType __pyx_v_payerType;
  CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread;
  CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional;
  CYTHON_UNUSED PyObject *__pyx_v_fixedLegFrequency = 0;
  CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter = 0;
  CYTHON_UNUSED PyObject *__pyx_v_fixedLegConvention = 0;
  CYTHON_UNUSED PyObject *__pyx_v_floatingLegFrequency = 0;
  CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter = 0;
  CYTHON_UNUSED PyObject *__pyx_v_floatingLegConvention = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__tenor,&__pyx_n_s__settle,&__pyx_n_s__maturity,&__pyx_n_s__fixedRate,&__pyx_n_s__payerType,&__pyx_n_s__floating_spread,&__pyx_n_s__notional,&__pyx_n_s__fixedLegFrequency,&__pyx_n_s__fixedLegDayCounter,&__pyx_n_s__fixedLegConvention,&__pyx_n_s_1,&__pyx_n_s_2,&__pyx_n_s_3,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tenor);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__settle);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maturity);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedRate);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__payerType);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__floating_spread);
        if (likely(values[5])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notional);
        if (likely(values[6])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegFrequency);
        if (likely(values[7])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegDayCounter);
        if (likely(values[8])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegConvention);
        if (likely(values[9])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_1);
        if (likely(values[10])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 11:
        values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_2);
        if (likely(values[11])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 11); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 12:
        values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_3);
        if (likely(values[12])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 12); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 13) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
    }
    __pyx_v_tenor = values[0];
    __pyx_v_settle = values[1];
    __pyx_v_maturity = values[2];
    __pyx_v_fixedRate = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_fixedRate == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_payerType = ((enum SwapPayType)PyInt_AsLong(values[4])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_floating_spread = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_floating_spread == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_notional = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_notional == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_fixedLegFrequency = values[7];
    __pyx_v_fixedLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[8]);
    __pyx_v_fixedLegConvention = values[9];
    __pyx_v_floatingLegFrequency = values[10];
    __pyx_v_floatingLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[11]);
    __pyx_v_floatingLegConvention = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fixedLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "fixedLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatingLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "floatingLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self), __pyx_v_tenor, __pyx_v_settle, __pyx_v_maturity, __pyx_v_fixedRate, __pyx_v_payerType, __pyx_v_floating_spread, __pyx_v_notional, __pyx_v_fixedLegFrequency, __pyx_v_fixedLegDayCounter, __pyx_v_fixedLegConvention, __pyx_v_floatingLegFrequency, __pyx_v_floatingLegDayCounter, __pyx_v_floatingLegConvention);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":51
 *             del self._thisptr
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             tenor,
 *             object settle,
 */

static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__(CYTHON_UNUSED struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, CYTHON_UNUSED PyObject *__pyx_v_settle, CYTHON_UNUSED PyObject *__pyx_v_maturity, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, CYTHON_UNUSED enum SwapPayType __pyx_v_payerType, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, CYTHON_UNUSED __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, CYTHON_UNUSED PyObject *__pyx_v_fixedLegFrequency, CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, CYTHON_UNUSED PyObject *__pyx_v_fixedLegConvention, CYTHON_UNUSED PyObject *__pyx_v_floatingLegFrequency, CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, CYTHON_UNUSED PyObject *__pyx_v_floatingLegConvention) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":72
 *         """
 * 
 *         print("Abstract Base Class")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":84
 *     #    Leg         floatingLeg()
 *     property payerType:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef SwapPayType payType
 *             cdef _fixedfloatswap.SwapPayType _payType
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  enum SwapPayType __pyx_v_payType;
  enum bondgeek::SwapPayType __pyx_v__payType;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":88
 *             cdef _fixedfloatswap.SwapPayType _payType
 * 
 *             _payType = self._thisptr.get().payerType()             # <<<<<<<<<<<<<<
 * 
 *             payType = <SwapPayType>_payType
 */
  __pyx_v__payType = __pyx_v_self->_thisptr->get()->payerType();

  /* "pybg/instruments/fixedfloatswap.pyx":90
 *             _payType = self._thisptr.get().payerType()
 * 
 *             payType = <SwapPayType>_payType             # <<<<<<<<<<<<<<
 * 
 *             return payType
 */
  __pyx_v_payType = ((enum SwapPayType)__pyx_v__payType);

  /* "pybg/instruments/fixedfloatswap.pyx":92
 *             payType = <SwapPayType>_payType
 * 
 *             return payType             # <<<<<<<<<<<<<<
 * 
 *     property nominal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_payType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.payerType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":95
 * 
 *     property nominal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real _nominal
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v__nominal;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":98
 *             cdef Real _nominal
 * 
 *             _nominal = self._thisptr.get().nominal()             # <<<<<<<<<<<<<<
 * 
 *             return _nominal
 */
  __pyx_v__nominal = __pyx_v_self->_thisptr->get()->nominal();

  /* "pybg/instruments/fixedfloatswap.pyx":100
 *             _nominal = self._thisptr.get().nominal()
 * 
 *             return _nominal             # <<<<<<<<<<<<<<
 * 
 *     property fixedRate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__nominal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.nominal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":103
 * 
 *     property fixedRate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real _fixedRate
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v__fixedRate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":106
 *             cdef Real _fixedRate
 * 
 *             _fixedRate = self._thisptr.get().fixedRate()             # <<<<<<<<<<<<<<
 * 
 *             return _fixedRate
 */
  __pyx_v__fixedRate = __pyx_v_self->_thisptr->get()->fixedRate();

  /* "pybg/instruments/fixedfloatswap.pyx":108
 *             _fixedRate = self._thisptr.get().fixedRate()
 * 
 *             return _fixedRate             # <<<<<<<<<<<<<<
 * 
 *     property spread:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__fixedRate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fixedRate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":111
 * 
 *     property spread:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real _spread
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v__spread;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":114
 *             cdef Real _spread
 * 
 *             _spread = self._thisptr.get().spread()             # <<<<<<<<<<<<<<
 * 
 *             return _spread
 */
  __pyx_v__spread = __pyx_v_self->_thisptr->get()->spread();

  /* "pybg/instruments/fixedfloatswap.pyx":116
 *             _spread = self._thisptr.get().spread()
 * 
 *             return _spread             # <<<<<<<<<<<<<<
 * 
 *     property fixedLeg:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__spread); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.spread.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":119
 * 
 *     property fixedLeg:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _cashflow.Leg leg
 *             cdef object result
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  QuantLib::Leg __pyx_v_leg;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":123
 *             cdef object result
 * 
 *             leg = self._thisptr.get().fixedLeg()             # <<<<<<<<<<<<<<
 * 
 *             result = cashflow.leg_items(leg)
 */
  __pyx_v_leg = __pyx_v_self->_thisptr->get()->fixedLeg();

  /* "pybg/instruments/fixedfloatswap.pyx":125
 *             leg = self._thisptr.get().fixedLeg()
 * 
 *             result = cashflow.leg_items(leg)             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_t_1 = __pyx_f_4pybg_8quantlib_8cashflow_leg_items(__pyx_v_leg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":127
 *             result = cashflow.leg_items(leg)
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property floatingLeg:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fixedLeg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":130
 * 
 *     property floatingLeg:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _cashflow.Leg leg
 *             cdef object result
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  QuantLib::Leg __pyx_v_leg;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":134
 *             cdef object result
 * 
 *             leg = self._thisptr.get().floatingLeg()             # <<<<<<<<<<<<<<
 * 
 *             result = cashflow.leg_items(leg)
 */
  __pyx_v_leg = __pyx_v_self->_thisptr->get()->floatingLeg();

  /* "pybg/instruments/fixedfloatswap.pyx":136
 *             leg = self._thisptr.get().floatingLeg()
 * 
 *             result = cashflow.leg_items(leg)             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_t_1 = __pyx_f_4pybg_8quantlib_8cashflow_leg_items(__pyx_v_leg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":138
 *             result = cashflow.leg_items(leg)
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     #Results
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.floatingLeg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":149
 *     #    Spread fairSpread()
 *     property NPV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":152
 *             cdef Real result
 * 
 *             result = self._thisptr.get().NPV()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->NPV();

  /* "pybg/instruments/fixedfloatswap.pyx":154
 *             result = self._thisptr.get().NPV()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.NPV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":158
 * 
 *     property fixedLegBPS:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":161
 *             cdef Real result
 * 
 *             result = self._thisptr.get().fixedLegBPS()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->fixedLegBPS();

  /* "pybg/instruments/fixedfloatswap.pyx":163
 *             result = self._thisptr.get().fixedLegBPS()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property fixedLegNPV:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fixedLegBPS.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":166
 * 
 *     property fixedLegNPV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":169
 *             cdef Real result
 * 
 *             result = self._thisptr.get().fixedLegNPV()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->fixedLegNPV();

  /* "pybg/instruments/fixedfloatswap.pyx":171
 *             result = self._thisptr.get().fixedLegNPV()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property fairRate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fixedLegNPV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":174
 * 
 *     property fairRate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Rate result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":177
 *             cdef Rate result
 * 
 *             result = self._thisptr.get().fairRate()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->fairRate();

  /* "pybg/instruments/fixedfloatswap.pyx":179
 *             result = self._thisptr.get().fairRate()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property fairSpread:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fairRate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":182
 * 
 *     property fairSpread:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Spread result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":185
 *             cdef Spread result
 * 
 *             result = self._thisptr.get().fairSpread()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->fairSpread();

  /* "pybg/instruments/fixedfloatswap.pyx":187
 *             result = self._thisptr.get().fairSpread()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property floatingLegBPS:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.fairSpread.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":190
 * 
 *     property floatingLegBPS:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":193
 *             cdef Real result
 * 
 *             result = self._thisptr.get().floatingLegBPS()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->floatingLegBPS();

  /* "pybg/instruments/fixedfloatswap.pyx":195
 *             result = self._thisptr.get().floatingLegBPS()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property floatingLegNPV:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.floatingLegBPS.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV___get__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":198
 * 
 *     property floatingLegNPV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Real result
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV___get__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap *__pyx_v_self) {
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":201
 *             cdef Real result
 * 
 *             result = self._thisptr.get().floatingLegNPV()             # <<<<<<<<<<<<<<
 * 
 *             return result
 */
  __pyx_v_result = __pyx_v_self->_thisptr->get()->floatingLegNPV();

  /* "pybg/instruments/fixedfloatswap.pyx":203
 *             result = self._thisptr.get().floatingLegNPV()
 * 
 *             return result             # <<<<<<<<<<<<<<
 * 
 * cdef class USDLiborSwap(LiborSwap):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.LiborSwap.floatingLegNPV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_tenor = 0;
  PyObject *__pyx_v_settle = 0;
  PyObject *__pyx_v_maturity = 0;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate;
  enum SwapPayType __pyx_v_payerType;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional;
  PyObject *__pyx_v_fixedLegFrequency = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter = 0;
  PyObject *__pyx_v_fixedLegConvention = 0;
  PyObject *__pyx_v_floatingLegFrequency = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter = 0;
  PyObject *__pyx_v_floatingLegConvention = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__tenor,&__pyx_n_s__settle,&__pyx_n_s__maturity,&__pyx_n_s__fixedRate,&__pyx_n_s__payerType,&__pyx_n_s__floating_spread,&__pyx_n_s__notional,&__pyx_n_s__fixedLegFrequency,&__pyx_n_s__fixedLegDayCounter,&__pyx_n_s__fixedLegConvention,&__pyx_n_s_1,&__pyx_n_s_2,&__pyx_n_s_3,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[7] = __pyx_k_5;
    values[8] = (PyObject *)__pyx_k_6;
    values[9] = __pyx_k_7;
    values[10] = __pyx_k_8;
    values[11] = (PyObject *)__pyx_k_9;
    values[12] = __pyx_k_10;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tenor);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__settle);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maturity);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedRate);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__payerType);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__floating_spread);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notional);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegFrequency);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegDayCounter);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegConvention);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_1);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_2);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_3);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[5]) {
      } else {

        /* "pybg/instruments/fixedfloatswap.pyx":212
 *             Rate fixedRate,
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,             # <<<<<<<<<<<<<<
 *             Real notional=1000000.0,
 *             # Fixed Leg
 */
        __pyx_v_floating_spread = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Spread)0.0);
      }
      if (values[6]) {
      } else {

        /* "pybg/instruments/fixedfloatswap.pyx":213
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,
 *             Real notional=1000000.0,             # <<<<<<<<<<<<<<
 *             # Fixed Leg
 *             fixedLegFrequency=Semiannual,
 */
        __pyx_v_notional = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Real)1000000.0);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tenor = values[0];
    __pyx_v_settle = values[1];
    __pyx_v_maturity = values[2];
    __pyx_v_fixedRate = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_fixedRate == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_payerType = ((enum SwapPayType)PyInt_AsLong(values[4])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[5]) {
      __pyx_v_floating_spread = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_floating_spread == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/fixedfloatswap.pyx":212
 *             Rate fixedRate,
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,             # <<<<<<<<<<<<<<
 *             Real notional=1000000.0,
 *             # Fixed Leg
 */
      __pyx_v_floating_spread = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Spread)0.0);
    }
    if (values[6]) {
      __pyx_v_notional = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_notional == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/fixedfloatswap.pyx":213
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,
 *             Real notional=1000000.0,             # <<<<<<<<<<<<<<
 *             # Fixed Leg
 *             fixedLegFrequency=Semiannual,
 */
      __pyx_v_notional = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Real)1000000.0);
    }
    __pyx_v_fixedLegFrequency = values[7];
    __pyx_v_fixedLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[8]);
    __pyx_v_fixedLegConvention = values[9];
    __pyx_v_floatingLegFrequency = values[10];
    __pyx_v_floatingLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[11]);
    __pyx_v_floatingLegConvention = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.USDLiborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fixedLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "fixedLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatingLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "floatingLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap___init__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *)__pyx_v_self), __pyx_v_tenor, __pyx_v_settle, __pyx_v_maturity, __pyx_v_fixedRate, __pyx_v_payerType, __pyx_v_floating_spread, __pyx_v_notional, __pyx_v_fixedLegFrequency, __pyx_v_fixedLegDayCounter, __pyx_v_fixedLegConvention, __pyx_v_floatingLegFrequency, __pyx_v_floatingLegDayCounter, __pyx_v_floatingLegConvention);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":206
 * 
 * cdef class USDLiborSwap(LiborSwap):
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             tenor,
 *             object settle,
 */

static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap___init__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, PyObject *__pyx_v_settle, PyObject *__pyx_v_maturity, __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, enum SwapPayType __pyx_v_payerType, __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, PyObject *__pyx_v_fixedLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, PyObject *__pyx_v_fixedLegConvention, PyObject *__pyx_v_floatingLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, PyObject *__pyx_v_floatingLegConvention) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum QuantLib::Frequency __pyx_t_1;
  enum QuantLib::BusinessDayConvention __pyx_t_2;
  enum QuantLib::Frequency __pyx_t_3;
  enum QuantLib::BusinessDayConvention __pyx_t_4;
  bondgeek::SwapType<QuantLib::USDLibor> *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":226
 *         self._swaptype = \
 *             new _fixedfloatswap.SwapType[ _libor.USDLibor ](
 *                 <_Frequency>fixedLegFrequency,             # <<<<<<<<<<<<<<
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,
 */
  __pyx_t_1 = ((enum QuantLib::Frequency)PyInt_AsLong(__pyx_v_fixedLegFrequency)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":228
 *                 <_Frequency>fixedLegFrequency,
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,             # <<<<<<<<<<<<<<
 *                 <_Frequency>floatingLegFrequency,
 *                 deref(floatingLegDayCounter._thisptr),
 */
  __pyx_t_2 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_fixedLegConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":229
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,
 *                 <_Frequency>floatingLegFrequency,             # <<<<<<<<<<<<<<
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,
 */
  __pyx_t_3 = ((enum QuantLib::Frequency)PyInt_AsLong(__pyx_v_floatingLegFrequency)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":231
 *                 <_Frequency>floatingLegFrequency,
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,             # <<<<<<<<<<<<<<
 *                 _Calendar.TARGET()
 *                 )
 */
  __pyx_t_4 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_floatingLegConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":232
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,
 *                 _Calendar.TARGET()             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
  try {__pyx_t_5 = new bondgeek::SwapType<QuantLib::USDLibor>(((enum QuantLib::Frequency)__pyx_t_1), (*__pyx_v_fixedLegDayCounter->_thisptr), ((enum QuantLib::BusinessDayConvention)__pyx_t_2), ((enum QuantLib::Frequency)__pyx_t_3), (*__pyx_v_floatingLegDayCounter->_thisptr), ((enum QuantLib::BusinessDayConvention)__pyx_t_4), QuantLib::TARGET());} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "pybg/instruments/fixedfloatswap.pyx":224
 *             ):
 * 
 *         self._swaptype = \             # <<<<<<<<<<<<<<
 *             new _fixedfloatswap.SwapType[ _libor.USDLibor ](
 *                 <_Frequency>fixedLegFrequency,
 */
  __pyx_v_self->_swaptype = __pyx_t_5;

  /* "pybg/instruments/fixedfloatswap.pyx":235
 *                 )
 * 
 *         self._thisptr = new shared_ptr[_fixedfloatswap.FixedFloatSwap]( \             # <<<<<<<<<<<<<<
 *             deref(self._swaptype).create(
 *                 _qldate_from_pydate(settle),
 */
  __pyx_v_self->__pyx_base._thisptr = new boost::shared_ptr<bondgeek::FixedFloatSwap>((*__pyx_v_self->_swaptype).create(__pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_settle), __pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_maturity), __pyx_v_fixedRate, ((enum bondgeek::SwapPayType)__pyx_v_payerType), __pyx_v_floating_spread, __pyx_v_notional));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.USDLiborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_3setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_3setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_crv), __pyx_ptype_4pybg_6curves_RateHelperCurve, 1, "crv", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_2setEngine(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *)__pyx_v_self), ((struct __pyx_obj_4pybg_6curves_RateHelperCurve *)__pyx_v_crv));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":245
 *                 )
 *             )
 *     def setEngine(self, curves.RateHelperCurve crv):             # <<<<<<<<<<<<<<
 *         cdef _curves.RateHelperCurve _crv
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_2setEngine(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv) {
  bondgeek::RateHelperCurve __pyx_v__crv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":248
 *         cdef _curves.RateHelperCurve _crv
 * 
 *         _crv = deref(crv._thisptr.get())             # <<<<<<<<<<<<<<
 * 
 *         deref(self._swaptype).linkIndex(_crv)
 */
  __pyx_v__crv = (*__pyx_v_crv->_thisptr->get());

  /* "pybg/instruments/fixedfloatswap.pyx":250
 *         _crv = deref(crv._thisptr.get())
 * 
 *         deref(self._swaptype).linkIndex(_crv)             # <<<<<<<<<<<<<<
 *         self._thisptr.get().setEngine(_crv)
 * 
 */
  (*__pyx_v_self->_swaptype).linkIndex(__pyx_v__crv);

  /* "pybg/instruments/fixedfloatswap.pyx":251
 * 
 *         deref(self._swaptype).linkIndex(_crv)
 *         self._thisptr.get().setEngine(_crv)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base._thisptr->get()->setEngine(__pyx_v__crv);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_tenor = 0;
  PyObject *__pyx_v_settle = 0;
  PyObject *__pyx_v_maturity = 0;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate;
  enum SwapPayType __pyx_v_payerType;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread;
  __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional;
  PyObject *__pyx_v_fixedLegFrequency = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter = 0;
  PyObject *__pyx_v_fixedLegConvention = 0;
  PyObject *__pyx_v_floatingLegFrequency = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter = 0;
  PyObject *__pyx_v_floatingLegConvention = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__tenor,&__pyx_n_s__settle,&__pyx_n_s__maturity,&__pyx_n_s__fixedRate,&__pyx_n_s__payerType,&__pyx_n_s__floating_spread,&__pyx_n_s__notional,&__pyx_n_s__fixedLegFrequency,&__pyx_n_s__fixedLegDayCounter,&__pyx_n_s__fixedLegConvention,&__pyx_n_s_1,&__pyx_n_s_2,&__pyx_n_s_3,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[7] = __pyx_k_11;
    values[8] = (PyObject *)__pyx_k_12;
    values[9] = __pyx_k_13;
    values[10] = __pyx_k_14;
    values[11] = (PyObject *)__pyx_k_15;
    values[12] = __pyx_k_16;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tenor);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__settle);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maturity);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedRate);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__payerType);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__floating_spread);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notional);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegFrequency);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegDayCounter);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fixedLegConvention);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_1);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_2);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_3);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[5]) {
      } else {

        /* "pybg/instruments/fixedfloatswap.pyx":261
 *             Rate fixedRate,
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,             # <<<<<<<<<<<<<<
 *             Real notional=1000000.0,
 *             # Fixed Leg
 */
        __pyx_v_floating_spread = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Spread)0.0);
      }
      if (values[6]) {
      } else {

        /* "pybg/instruments/fixedfloatswap.pyx":262
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,
 *             Real notional=1000000.0,             # <<<<<<<<<<<<<<
 *             # Fixed Leg
 *             fixedLegFrequency=Annual,
 */
        __pyx_v_notional = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Real)1000000.0);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tenor = values[0];
    __pyx_v_settle = values[1];
    __pyx_v_maturity = values[2];
    __pyx_v_fixedRate = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_fixedRate == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_payerType = ((enum SwapPayType)PyInt_AsLong(values[4])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[5]) {
      __pyx_v_floating_spread = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_floating_spread == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/fixedfloatswap.pyx":261
 *             Rate fixedRate,
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,             # <<<<<<<<<<<<<<
 *             Real notional=1000000.0,
 *             # Fixed Leg
 */
      __pyx_v_floating_spread = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Spread)0.0);
    }
    if (values[6]) {
      __pyx_v_notional = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_notional == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/fixedfloatswap.pyx":262
 *             SwapPayType payerType,
 *             Spread floating_spread=0.0,
 *             Real notional=1000000.0,             # <<<<<<<<<<<<<<
 *             # Fixed Leg
 *             fixedLegFrequency=Annual,
 */
      __pyx_v_notional = ((__pyx_t_4pybg_11instruments_14fixedfloatswap_Real)1000000.0);
    }
    __pyx_v_fixedLegFrequency = values[7];
    __pyx_v_fixedLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[8]);
    __pyx_v_fixedLegConvention = values[9];
    __pyx_v_floatingLegFrequency = values[10];
    __pyx_v_floatingLegDayCounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[11]);
    __pyx_v_floatingLegConvention = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 13, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.EuriborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fixedLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "fixedLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatingLegDayCounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "floatingLegDayCounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap___init__(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *)__pyx_v_self), __pyx_v_tenor, __pyx_v_settle, __pyx_v_maturity, __pyx_v_fixedRate, __pyx_v_payerType, __pyx_v_floating_spread, __pyx_v_notional, __pyx_v_fixedLegFrequency, __pyx_v_fixedLegDayCounter, __pyx_v_fixedLegConvention, __pyx_v_floatingLegFrequency, __pyx_v_floatingLegDayCounter, __pyx_v_floatingLegConvention);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":255
 * 
 * cdef class EuriborSwap(LiborSwap):
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             tenor,
 *             object settle,
 */

static int __pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap___init__(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tenor, PyObject *__pyx_v_settle, PyObject *__pyx_v_maturity, __pyx_t_4pybg_11instruments_14fixedfloatswap_Rate __pyx_v_fixedRate, enum SwapPayType __pyx_v_payerType, __pyx_t_4pybg_11instruments_14fixedfloatswap_Spread __pyx_v_floating_spread, __pyx_t_4pybg_11instruments_14fixedfloatswap_Real __pyx_v_notional, PyObject *__pyx_v_fixedLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_fixedLegDayCounter, PyObject *__pyx_v_fixedLegConvention, PyObject *__pyx_v_floatingLegFrequency, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_floatingLegDayCounter, PyObject *__pyx_v_floatingLegConvention) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum QuantLib::Frequency __pyx_t_1;
  enum QuantLib::BusinessDayConvention __pyx_t_2;
  enum QuantLib::Frequency __pyx_t_3;
  enum QuantLib::BusinessDayConvention __pyx_t_4;
  bondgeek::SwapType<QuantLib::Euribor> *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":275
 *         self._swaptype = \
 *             new _fixedfloatswap.SwapType[ _euribor.Euribor ](
 *                 <_Frequency>fixedLegFrequency,             # <<<<<<<<<<<<<<
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,
 */
  __pyx_t_1 = ((enum QuantLib::Frequency)PyInt_AsLong(__pyx_v_fixedLegFrequency)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":277
 *                 <_Frequency>fixedLegFrequency,
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,             # <<<<<<<<<<<<<<
 *                 <_Frequency>floatingLegFrequency,
 *                 deref(floatingLegDayCounter._thisptr),
 */
  __pyx_t_2 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_fixedLegConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":278
 *                 deref(fixedLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>fixedLegConvention,
 *                 <_Frequency>floatingLegFrequency,             # <<<<<<<<<<<<<<
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,
 */
  __pyx_t_3 = ((enum QuantLib::Frequency)PyInt_AsLong(__pyx_v_floatingLegFrequency)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":280
 *                 <_Frequency>floatingLegFrequency,
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,             # <<<<<<<<<<<<<<
 *                 _Calendar.TARGET()
 *                 )
 */
  __pyx_t_4 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_floatingLegConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/fixedfloatswap.pyx":281
 *                 deref(floatingLegDayCounter._thisptr),
 *                 <_BusinessDayConvention>floatingLegConvention,
 *                 _Calendar.TARGET()             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
  try {__pyx_t_5 = new bondgeek::SwapType<QuantLib::Euribor>(((enum QuantLib::Frequency)__pyx_t_1), (*__pyx_v_fixedLegDayCounter->_thisptr), ((enum QuantLib::BusinessDayConvention)__pyx_t_2), ((enum QuantLib::Frequency)__pyx_t_3), (*__pyx_v_floatingLegDayCounter->_thisptr), ((enum QuantLib::BusinessDayConvention)__pyx_t_4), QuantLib::TARGET());} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "pybg/instruments/fixedfloatswap.pyx":273
 *             ):
 * 
 *         self._swaptype = \             # <<<<<<<<<<<<<<
 *             new _fixedfloatswap.SwapType[ _euribor.Euribor ](
 *                 <_Frequency>fixedLegFrequency,
 */
  __pyx_v_self->_swaptype = __pyx_t_5;

  /* "pybg/instruments/fixedfloatswap.pyx":284
 *                 )
 * 
 *         self._thisptr = new shared_ptr[_fixedfloatswap.FixedFloatSwap]( \             # <<<<<<<<<<<<<<
 *             deref(self._swaptype).create(
 *                 _qldate_from_pydate(settle),
 */
  __pyx_v_self->__pyx_base._thisptr = new boost::shared_ptr<bondgeek::FixedFloatSwap>((*__pyx_v_self->_swaptype).create(__pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_settle), __pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_maturity), __pyx_v_fixedRate, ((enum bondgeek::SwapPayType)__pyx_v_payerType), __pyx_v_floating_spread, __pyx_v_notional));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pybg.instruments.fixedfloatswap.EuriborSwap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_3setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_3setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_crv), __pyx_ptype_4pybg_6curves_RateHelperCurve, 1, "crv", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_2setEngine(((struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *)__pyx_v_self), ((struct __pyx_obj_4pybg_6curves_RateHelperCurve *)__pyx_v_crv));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/fixedfloatswap.pyx":295
 *             )
 * 
 *     def setEngine(self, curves.RateHelperCurve crv):             # <<<<<<<<<<<<<<
 *         cdef _curves.RateHelperCurve _crv
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_2setEngine(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv) {
  bondgeek::RateHelperCurve __pyx_v__crv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine", 0);

  /* "pybg/instruments/fixedfloatswap.pyx":298
 *         cdef _curves.RateHelperCurve _crv
 * 
 *         _crv = deref(crv._thisptr.get())             # <<<<<<<<<<<<<<
 * 
 *         deref(self._swaptype).linkIndex(_crv)
 */
  __pyx_v__crv = (*__pyx_v_crv->_thisptr->get());

  /* "pybg/instruments/fixedfloatswap.pyx":300
 *         _crv = deref(crv._thisptr.get())
 * 
 *         deref(self._swaptype).linkIndex(_crv)             # <<<<<<<<<<<<<<
 *         self._thisptr.get().setEngine(_crv)
 */
  (*__pyx_v_self->_swaptype).linkIndex(__pyx_v__crv);

  /* "pybg/instruments/fixedfloatswap.pyx":301
 * 
 *         deref(self._swaptype).linkIndex(_crv)
 *         self._thisptr.get().setEngine(_crv)             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->__pyx_base._thisptr->get()->setEngine(__pyx_v__crv);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4pybg_11instruments_14fixedfloatswap_LiborSwap(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4pybg_11instruments_14fixedfloatswap_LiborSwap(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_payerType(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9payerType_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_nominal(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_7nominal_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedRate(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_9fixedRate_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_spread(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_6spread_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLeg(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fixedLeg_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLeg(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11floatingLeg_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_NPV(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_3NPV_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLegBPS(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegBPS_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLegNPV(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_11fixedLegNPV_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fairRate(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_8fairRate_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fairSpread(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_10fairSpread_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLegBPS(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegBPS_1__get__(o);
}

static PyObject *__pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLegNPV(PyObject *o, void *x) {
  return __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_14floatingLegNPV_1__get__(o);
}

static PyMethodDef __pyx_methods_4pybg_11instruments_14fixedfloatswap_LiborSwap[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4pybg_11instruments_14fixedfloatswap_LiborSwap[] = {
  {(char *)"payerType", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_payerType, 0, 0, 0},
  {(char *)"nominal", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_nominal, 0, 0, 0},
  {(char *)"fixedRate", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedRate, 0, 0, 0},
  {(char *)"spread", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_spread, 0, 0, 0},
  {(char *)"fixedLeg", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLeg, 0, 0, 0},
  {(char *)"floatingLeg", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLeg, 0, 0, 0},
  {(char *)"NPV", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_NPV, 0, 0, 0},
  {(char *)"fixedLegBPS", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLegBPS, 0, 0, 0},
  {(char *)"fixedLegNPV", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fixedLegNPV, 0, 0, 0},
  {(char *)"fairRate", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fairRate, 0, 0, 0},
  {(char *)"fairSpread", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_fairSpread, 0, 0, 0},
  {(char *)"floatingLegBPS", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLegBPS, 0, 0, 0},
  {(char *)"floatingLegNPV", __pyx_getprop_4pybg_11instruments_14fixedfloatswap_9LiborSwap_floatingLegNPV, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LiborSwap = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_LiborSwap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LiborSwap = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_LiborSwap = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_11instruments_14fixedfloatswap_LiborSwap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.instruments.fixedfloatswap.LiborSwap"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_LiborSwap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LiborSwap, /*tp_as_number*/
  &__pyx_tp_as_sequence_LiborSwap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LiborSwap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_LiborSwap, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Libor Swap factory\n    \n    Uses c++ SwapType\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_11instruments_14fixedfloatswap_9LiborSwap_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4pybg_11instruments_14fixedfloatswap_USDLiborSwap(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4pybg_11instruments_14fixedfloatswap_LiborSwap(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_4pybg_11instruments_14fixedfloatswap_USDLiborSwap[] = {
  {__Pyx_NAMESTR("setEngine"), (PyCFunction)__pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_3setEngine, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_USDLiborSwap = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_USDLiborSwap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_USDLiborSwap = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_USDLiborSwap = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_11instruments_14fixedfloatswap_USDLiborSwap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.instruments.fixedfloatswap.USDLiborSwap"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_USDLiborSwap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_USDLiborSwap, /*tp_as_number*/
  &__pyx_tp_as_sequence_USDLiborSwap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_USDLiborSwap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_USDLiborSwap, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("USD Libor Swap\n    \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_11instruments_14fixedfloatswap_USDLiborSwap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_11instruments_14fixedfloatswap_12USDLiborSwap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_11instruments_14fixedfloatswap_USDLiborSwap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4pybg_11instruments_14fixedfloatswap_EuriborSwap(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4pybg_11instruments_14fixedfloatswap_LiborSwap(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_4pybg_11instruments_14fixedfloatswap_EuriborSwap[] = {
  {__Pyx_NAMESTR("setEngine"), (PyCFunction)__pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_3setEngine, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_EuriborSwap = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_EuriborSwap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_EuriborSwap = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_EuriborSwap = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_11instruments_14fixedfloatswap_EuriborSwap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.instruments.fixedfloatswap.EuriborSwap"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_11instruments_14fixedfloatswap_EuriborSwap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_11instruments_14fixedfloatswap_LiborSwap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_EuriborSwap, /*tp_as_number*/
  &__pyx_tp_as_sequence_EuriborSwap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_EuriborSwap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_EuriborSwap, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("USD Libor Swap\n    \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_11instruments_14fixedfloatswap_EuriborSwap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_11instruments_14fixedfloatswap_11EuriborSwap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_11instruments_14fixedfloatswap_EuriborSwap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

char* __pyx_import_star_type_names[] = {
  "BigNatural",
  "_Frequency",
  "SwapPayType",
  "Spread",
  "DayCounter",
  "Real",
  "_Calendar",
  "Integer",
  "Decimal",
  "Volatility",
  "LiborSwap",
  "IborIndex",
  "Natural",
  "USDLiborSwap",
  "EuriborSwap",
  "DiscountFactor",
  "Time",
  "shared_ptr",
  "_BusinessDayConvention",
  "BigInteger",
  "Day",
  "Rate",
  "Year",
  "Size",
  0
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  char** type_name = __pyx_import_star_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}


/* import_all_from is an unexposed function from ceval.c */

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = __Pyx_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1; /* Unexpected error */
        PyErr_Clear();
        dict = __Pyx_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("fixedfloatswap"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 1},
  {&__pyx_n_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 1},
  {&__pyx_n_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 1},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_n_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 1},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s__Actual360, __pyx_k__Actual360, sizeof(__pyx_k__Actual360), 0, 0, 1, 1},
  {&__pyx_n_s__Annual, __pyx_k__Annual, sizeof(__pyx_k__Annual), 0, 0, 1, 1},
  {&__pyx_n_s__EUROBONDBASIS, __pyx_k__EUROBONDBASIS, sizeof(__pyx_k__EUROBONDBASIS), 0, 0, 1, 1},
  {&__pyx_n_s__EUROPEAN, __pyx_k__EUROPEAN, sizeof(__pyx_k__EUROPEAN), 0, 0, 1, 1},
  {&__pyx_n_s__Following, __pyx_k__Following, sizeof(__pyx_k__Following), 0, 0, 1, 1},
  {&__pyx_n_s__ModifiedFollowing, __pyx_k__ModifiedFollowing, sizeof(__pyx_k__ModifiedFollowing), 0, 0, 1, 1},
  {&__pyx_n_s__Quarterly, __pyx_k__Quarterly, sizeof(__pyx_k__Quarterly), 0, 0, 1, 1},
  {&__pyx_n_s__Semiannual, __pyx_k__Semiannual, sizeof(__pyx_k__Semiannual), 0, 0, 1, 1},
  {&__pyx_n_s__Thirty360, __pyx_k__Thirty360, sizeof(__pyx_k__Thirty360), 0, 0, 1, 1},
  {&__pyx_n_s__Unadjusted, __pyx_k__Unadjusted, sizeof(__pyx_k__Unadjusted), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__fixedLegConvention, __pyx_k__fixedLegConvention, sizeof(__pyx_k__fixedLegConvention), 0, 0, 1, 1},
  {&__pyx_n_s__fixedLegDayCounter, __pyx_k__fixedLegDayCounter, sizeof(__pyx_k__fixedLegDayCounter), 0, 0, 1, 1},
  {&__pyx_n_s__fixedLegFrequency, __pyx_k__fixedLegFrequency, sizeof(__pyx_k__fixedLegFrequency), 0, 0, 1, 1},
  {&__pyx_n_s__fixedRate, __pyx_k__fixedRate, sizeof(__pyx_k__fixedRate), 0, 0, 1, 1},
  {&__pyx_n_s__floating_spread, __pyx_k__floating_spread, sizeof(__pyx_k__floating_spread), 0, 0, 1, 1},
  {&__pyx_n_s__maturity, __pyx_k__maturity, sizeof(__pyx_k__maturity), 0, 0, 1, 1},
  {&__pyx_n_s__notional, __pyx_k__notional, sizeof(__pyx_k__notional), 0, 0, 1, 1},
  {&__pyx_n_s__payerType, __pyx_k__payerType, sizeof(__pyx_k__payerType), 0, 0, 1, 1},
  {&__pyx_n_s__settle, __pyx_k__settle, sizeof(__pyx_k__settle), 0, 0, 1, 1},
  {&__pyx_n_s__tenor, __pyx_k__tenor, sizeof(__pyx_k__tenor), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initfixedfloatswap(void); /*proto*/
PyMODINIT_FUNC initfixedfloatswap(void)
#else
PyMODINIT_FUNC PyInit_fixedfloatswap(void); /*proto*/
PyMODINIT_FUNC PyInit_fixedfloatswap(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_fixedfloatswap(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("fixedfloatswap"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pybg__instruments__fixedfloatswap) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4pybg_11instruments_14fixedfloatswap_LiborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4pybg_11instruments_14fixedfloatswap_LiborSwap, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__.doc = __pyx_doc_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4pybg_11instruments_14fixedfloatswap_9LiborSwap_4__init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "LiborSwap", (PyObject *)&__pyx_type_4pybg_11instruments_14fixedfloatswap_LiborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_11instruments_14fixedfloatswap_LiborSwap = &__pyx_type_4pybg_11instruments_14fixedfloatswap_LiborSwap;
  __pyx_type_4pybg_11instruments_14fixedfloatswap_USDLiborSwap.tp_base = __pyx_ptype_4pybg_11instruments_14fixedfloatswap_LiborSwap;
  if (PyType_Ready(&__pyx_type_4pybg_11instruments_14fixedfloatswap_USDLiborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "USDLiborSwap", (PyObject *)&__pyx_type_4pybg_11instruments_14fixedfloatswap_USDLiborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_11instruments_14fixedfloatswap_USDLiborSwap = &__pyx_type_4pybg_11instruments_14fixedfloatswap_USDLiborSwap;
  __pyx_type_4pybg_11instruments_14fixedfloatswap_EuriborSwap.tp_base = __pyx_ptype_4pybg_11instruments_14fixedfloatswap_LiborSwap;
  if (PyType_Ready(&__pyx_type_4pybg_11instruments_14fixedfloatswap_EuriborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "EuriborSwap", (PyObject *)&__pyx_type_4pybg_11instruments_14fixedfloatswap_EuriborSwap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_11instruments_14fixedfloatswap_EuriborSwap = &__pyx_type_4pybg_11instruments_14fixedfloatswap_EuriborSwap;
  /*--- Type import code ---*/
  __pyx_ptype_4pybg_8quantlib_4time_4date_Period = __Pyx_ImportType("pybg.quantlib.time.date", "Period", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Period), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Period)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_4date_Date = __Pyx_ImportType("pybg.quantlib.time.date", "Date", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Date), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Date)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_8cashflow_CashFlow = __Pyx_ImportType("pybg.quantlib.cashflow", "CashFlow", sizeof(struct __pyx_obj_4pybg_8quantlib_8cashflow_CashFlow), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_8cashflow_CashFlow)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_8cashflow_SimpleCashFlow = __Pyx_ImportType("pybg.quantlib.cashflow", "SimpleCashFlow", sizeof(struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleCashFlow), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_8cashflow_SimpleCashFlow)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_8cashflow_SimpleLeg = __Pyx_ImportType("pybg.quantlib.cashflow", "SimpleLeg", sizeof(struct __pyx_obj_4pybg_8quantlib_8cashflow_SimpleLeg), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_8cashflow_SimpleLeg)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_6curves_CurveBase = __Pyx_ImportType("pybg.curves", "CurveBase", sizeof(struct __pyx_obj_4pybg_6curves_CurveBase), 1); if (unlikely(!__pyx_ptype_4pybg_6curves_CurveBase)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_6curves_RateHelperCurve = __Pyx_ImportType("pybg.curves", "RateHelperCurve", sizeof(struct __pyx_obj_4pybg_6curves_RateHelperCurve), 1); if (unlikely(!__pyx_ptype_4pybg_6curves_RateHelperCurve)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = __Pyx_ImportType("pybg.quantlib.time.daycounter", "DayCounter", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("pybg.ql"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_pydate_from_qldate", (void (**)(void))&__pyx_f_4pybg_2ql__pydate_from_qldate, "PyObject *(QuantLib::Date)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_qldate_from_pydate", (void (**)(void))&__pyx_f_4pybg_2ql__qldate_from_pydate, "QuantLib::Date (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("pybg.quantlib.cashflow"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "leg_items", (void (**)(void))&__pyx_f_4pybg_8quantlib_8cashflow_leg_items, "PyObject *(std::vector<boost::shared_ptr<QuantLib::CashFlow> >)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  /*--- Execution code ---*/

  /* "pybg/instruments/fixedfloatswap.pyx":25
 * from pybg.quantlib.time.daycounter cimport DayCounter
 * from pybg.quantlib.time.daycounters.thirty360 import (
 *         Thirty360, EUROBONDBASIS, EUROPEAN             # <<<<<<<<<<<<<<
 * )
 * from pybg.quantlib.time.calendar import Following, ModifiedFollowing, Unadjusted
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Thirty360));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__Thirty360));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Thirty360));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__EUROBONDBASIS));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_n_s__EUROBONDBASIS));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__EUROBONDBASIS));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__EUROPEAN));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_n_s__EUROPEAN));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__EUROPEAN));
  __pyx_t_4 = __Pyx_Import(((PyObject *)__pyx_n_s_17), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__Thirty360);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Thirty360);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Thirty360, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__EUROBONDBASIS);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__EUROBONDBASIS);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EUROBONDBASIS, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__EUROPEAN);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__EUROPEAN);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EUROPEAN, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":27
 *         Thirty360, EUROBONDBASIS, EUROPEAN
 * )
 * from pybg.quantlib.time.calendar import Following, ModifiedFollowing, Unadjusted             # <<<<<<<<<<<<<<
 * 
 * from pybg.quantlib.time.api import *
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Following));
  PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__Following));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Following));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ModifiedFollowing));
  PyList_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_n_s__ModifiedFollowing));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ModifiedFollowing));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Unadjusted));
  PyList_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_n_s__Unadjusted));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Unadjusted));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_18), ((PyObject *)__pyx_t_4), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Following);
  if (__pyx_t_4 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Following);
    if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Following, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__ModifiedFollowing);
  if (__pyx_t_4 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__ModifiedFollowing);
    if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ModifiedFollowing, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Unadjusted);
  if (__pyx_t_4 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Unadjusted);
    if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Unadjusted, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":29
 * from pybg.quantlib.time.calendar import Following, ModifiedFollowing, Unadjusted
 * 
 * from pybg.quantlib.time.api import *             # <<<<<<<<<<<<<<
 * 
 * cimport pybg.quantlib._cashflow as _cashflow
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s_20));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s_20));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_20));
  __pyx_t_4 = __Pyx_Import(((PyObject *)__pyx_n_s_19), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (__pyx_import_star(__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":37
 * cimport pybg._curves as _curves
 * 
 * cdef public enum SwapPayType:             # <<<<<<<<<<<<<<
 *     FixedPayer    = _fixedfloatswap.FixedPayer
 *     FixedReceiver = _fixedfloatswap.FixedReceiver
 */
  __pyx_t_4 = PyInt_FromLong(FixedPayer); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetAttrString(__pyx_m, "FixedPayer", __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromLong(FixedReceiver); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetAttrString(__pyx_m, "FixedReceiver", __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":215
 *             Real notional=1000000.0,
 *             # Fixed Leg
 *             fixedLegFrequency=Semiannual,             # <<<<<<<<<<<<<<
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),
 *             fixedLegConvention=ModifiedFollowing,
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__Semiannual); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_k_5 = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":216
 *             # Fixed Leg
 *             fixedLegFrequency=Semiannual,
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),             # <<<<<<<<<<<<<<
 *             fixedLegConvention=ModifiedFollowing,
 *             # floating leg
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__Thirty360); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__EUROPEAN); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_6 = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":217
 *             fixedLegFrequency=Semiannual,
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),
 *             fixedLegConvention=ModifiedFollowing,             # <<<<<<<<<<<<<<
 *             # floating leg
 *             floatingLegFrequency=Quarterly,
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__ModifiedFollowing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_7 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":219
 *             fixedLegConvention=ModifiedFollowing,
 *             # floating leg
 *             floatingLegFrequency=Quarterly,             # <<<<<<<<<<<<<<
 *             DayCounter floatingLegDayCounter=Actual360(),
 *             floatingLegConvention=ModifiedFollowing
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__Quarterly); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_8 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":220
 *             # floating leg
 *             floatingLegFrequency=Quarterly,
 *             DayCounter floatingLegDayCounter=Actual360(),             # <<<<<<<<<<<<<<
 *             floatingLegConvention=ModifiedFollowing
 *             ):
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__Actual360); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_9 = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":222
 *             DayCounter floatingLegDayCounter=Actual360(),
 *             floatingLegConvention=ModifiedFollowing
 *             ):             # <<<<<<<<<<<<<<
 * 
 *         self._swaptype = \
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__ModifiedFollowing); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_k_10 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":264
 *             Real notional=1000000.0,
 *             # Fixed Leg
 *             fixedLegFrequency=Annual,             # <<<<<<<<<<<<<<
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),
 *             fixedLegConvention=Unadjusted,
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__Annual); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_k_11 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":265
 *             # Fixed Leg
 *             fixedLegFrequency=Annual,
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),             # <<<<<<<<<<<<<<
 *             fixedLegConvention=Unadjusted,
 *             # floating leg
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__Thirty360); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__EUROPEAN); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_12 = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":266
 *             fixedLegFrequency=Annual,
 *             DayCounter fixedLegDayCounter=Thirty360(EUROPEAN),
 *             fixedLegConvention=Unadjusted,             # <<<<<<<<<<<<<<
 *             # floating leg
 *             floatingLegFrequency=Semiannual,
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__Unadjusted); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_13 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":268
 *             fixedLegConvention=Unadjusted,
 *             # floating leg
 *             floatingLegFrequency=Semiannual,             # <<<<<<<<<<<<<<
 *             DayCounter floatingLegDayCounter=Actual360(),
 *             floatingLegConvention=ModifiedFollowing
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__Semiannual); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_14 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":269
 *             # floating leg
 *             floatingLegFrequency=Semiannual,
 *             DayCounter floatingLegDayCounter=Actual360(),             # <<<<<<<<<<<<<<
 *             floatingLegConvention=ModifiedFollowing
 *             ):
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__Actual360); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_15 = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":271
 *             DayCounter floatingLegDayCounter=Actual360(),
 *             floatingLegConvention=ModifiedFollowing
 *             ):             # <<<<<<<<<<<<<<
 * 
 *         self._swaptype = \
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__ModifiedFollowing); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_k_16 = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pybg/instruments/fixedfloatswap.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # not using distutils for libraries, Visual Studio auto-linking doesn't like
 * 
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pybg.instruments.fixedfloatswap", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pybg.instruments.fixedfloatswap");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                /* try package relative import first */
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && (size_t)((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
