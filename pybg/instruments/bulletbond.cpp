/* Generated by Cython 0.16 on Sat Jul  7 16:16:26 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pybg__instruments__bulletbond
#define __PYX_HAVE_API__pybg__instruments__bulletbond
#include "boost/shared_ptr.hpp"
#include "ql/handle.hpp"
#include "ql/time/frequency.hpp"
#include "ql/time/timeunit.hpp"
#include "ql/time/period.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "ostream"
#include "ql/time/weekday.hpp"
#include "ql/time/date.hpp"
#include <vector>
#include "string"
#include "ql/time/businessdayconvention.hpp"
#include "ql/time/calendar.hpp"
#include "ql/time/calendars/target.hpp"
#include "ql/time/daycounter.hpp"
#include "ql/time/daycounters/thirty360.hpp"
#include "ql/time/daycounters/actual360.hpp"
#include "ql/time/daycounters/actual365fixed.hpp"
#include "ql/time/daycounters/business252.hpp"
#include "ql/time/daycounters/one.hpp"
#include "ql/time/daycounters/simpledaycounter.hpp"
#include <utility>
#include <map>
#include <string>
#include "bg/curvebase.hpp"
#include "bg/curves/ratehelpercurve.hpp"
#include "bg/instruments/bulletbond.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "bulletbond.pyx",
  "date.pxd",
  "daycounter.pxd",
  "calendar.pxd",
  "curves.pxd",
};

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_7_period_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_7_period_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_7_period_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_7_period_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_5_date_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_5_date_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_5_date_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_5_date_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_9_calendar_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_9_calendar_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_11_daycounter_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_7_curves_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_7_curves_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_7_curves_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_7_curves_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_7_curves_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_7_curves_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_7_curves_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_7_curves_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_7_curves_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_7_curves_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_7_curves_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_7_curves_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_7_curves_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_7_curves_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_11instruments_11_bulletbond_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_11instruments_11_bulletbond_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_11instruments_11_bulletbond_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_11instruments_11_bulletbond_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_11instruments_11_bulletbond_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_11_bulletbond_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_11_bulletbond_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_11instruments_11_bulletbond_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_11instruments_10bulletbond_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_11instruments_10bulletbond_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_11instruments_10bulletbond_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_11instruments_10bulletbond_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_11instruments_10bulletbond_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_10bulletbond_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_11instruments_10bulletbond_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/instruments/../quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_11instruments_10bulletbond_DiscountFactor;

/*--- Type declarations ---*/
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar;
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_TARGET;
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedKingdom;
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_DateList;
struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period;
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter;
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedStates;
struct __pyx_obj_4pybg_6curves_CurveBase;
struct __pyx_obj_4pybg_6curves_RateHelperCurve;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date;

/* "pybg/quantlib/time/calendar.pxd":6
 * from libcpp.vector cimport vector
 * 
 * cdef class Calendar:             # <<<<<<<<<<<<<<
 *     cdef _calendar.Calendar* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar {
  PyObject_HEAD
  QuantLib::Calendar *_thisptr;
};


/* "pybg/quantlib/time/calendar.pxd":9
 *     cdef _calendar.Calendar* _thisptr
 * 
 * cdef class TARGET(Calendar):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_TARGET {
  struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar __pyx_base;
};


/* "pybg/quantlib/time/calendar.pxd":15
 *     pass
 * 
 * cdef class UnitedKingdom(Calendar):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedKingdom {
  struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar __pyx_base;
};


/* "pybg/quantlib/time/calendar.pxd":18
 *     pass
 * 
 * cdef class DateList:             # <<<<<<<<<<<<<<
 *     cdef vector[_date.Date]* _dates
 *     cdef size_t _pos
 */
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_DateList {
  PyObject_HEAD
  struct __pyx_vtabstruct_4pybg_8quantlib_4time_8calendar_DateList *__pyx_vtab;
  std::vector<QuantLib::Date> *_dates;
  size_t _pos;
};


/* "pybg/instruments/bulletbond.pxd":8
 * cimport pybg.instruments._bulletbond as _bulletbond
 * 
 * cdef class BulletBond:             # <<<<<<<<<<<<<<
 *     '''Bullet Bond Structure
 * 
 */
struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::BulletBond> *_thisptr;
};


/* "pybg/quantlib/time/date.pxd":17
 * 
 * 
 * cdef class Period:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Period> *_thisptr;
};


/* "pybg/quantlib/time/daycounter.pxd":3
 * cimport pybg.quantlib.time._daycounter as _daycounter
 * 
 * cdef class DayCounter:             # <<<<<<<<<<<<<<
 * 
 *     cdef _daycounter.DayCounter* _thisptr
 */
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter {
  PyObject_HEAD
  QuantLib::DayCounter *_thisptr;
};


/* "pybg/quantlib/time/calendar.pxd":12
 *     pass
 * 
 * cdef class UnitedStates(Calendar):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedStates {
  struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar __pyx_base;
};


/* "pybg/curves.pxd":10
 * # Base curve abstract class
 * # Specific curve types, e.g. 'USDLiborCurve' should be sub-classed off this
 * cdef class CurveBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_curves.CurveBase]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_6curves_CurveBase {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::CurveBase> *_thisptr;
};


/* "pybg/curves.pxd":13
 *     cdef shared_ptr[_curves.CurveBase]* _thisptr
 * 
 * cdef class RateHelperCurve:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_curves.RateHelperCurve]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_6curves_RateHelperCurve {
  PyObject_HEAD
  boost::shared_ptr<bondgeek::RateHelperCurve> *_thisptr;
};


/* "pybg/quantlib/time/date.pxd":20
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 * cdef class Date:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_date.Date]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Date> *_thisptr;
};



/* "pybg/quantlib/time/calendar.pxd":18
 *     pass
 * 
 * cdef class DateList:             # <<<<<<<<<<<<<<
 *     cdef vector[_date.Date]* _dates
 *     cdef size_t _pos
 */

struct __pyx_vtabstruct_4pybg_8quantlib_4time_8calendar_DateList {
  PyObject *(*_set_dates)(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_DateList *, std::vector<QuantLib::Date> &);
};
static struct __pyx_vtabstruct_4pybg_8quantlib_4time_8calendar_DateList *__pyx_vtabptr_4pybg_8quantlib_4time_8calendar_DateList;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'pybg.quantlib.handle' */

/* Module declarations from 'pybg.quantlib.time._period' */

/* Module declarations from 'pybg.quantlib.time._date' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pybg.quantlib.time._calendar' */

/* Module declarations from 'pybg.quantlib.time._daycounter' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pybg._curves' */

/* Module declarations from 'pybg.instruments._bulletbond' */

/* Module declarations from 'pybg.quantlib.time.date' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Period = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Date = 0;

/* Module declarations from 'pybg.ql' */
static PyObject *(*__pyx_f_4pybg_2ql__pydate_from_qldate)(QuantLib::Date); /*proto*/
static QuantLib::Date (*__pyx_f_4pybg_2ql__qldate_from_pydate)(PyObject *); /*proto*/

/* Module declarations from 'pybg.quantlib.time.daycounter' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = 0;

/* Module declarations from 'pybg.quantlib.time.calendar' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_8calendar_Calendar = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_8calendar_TARGET = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedStates = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedKingdom = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_8calendar_DateList = 0;

/* Module declarations from 'pybg.curves' */
static PyTypeObject *__pyx_ptype_4pybg_6curves_CurveBase = 0;
static PyTypeObject *__pyx_ptype_4pybg_6curves_RateHelperCurve = 0;

/* Module declarations from 'pybg.instruments.bulletbond' */
static PyTypeObject *__pyx_ptype_4pybg_11instruments_10bulletbond_BulletBond = 0;
#define __Pyx_MODULE_NAME "pybg.instruments.bulletbond"
int __pyx_module_is_main_pybg__instruments__bulletbond = 0;

/* Implementation of 'pybg.instruments.bulletbond' */
static int __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond___cinit__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self); /* proto */
static void __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_2__dealloc__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self); /* proto */
static int __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_4__init__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, __pyx_t_4pybg_11instruments_10bulletbond_Rate __pyx_v_coupon, PyObject *__pyx_v_maturity, PyObject *__pyx_v_issue_date, struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar *__pyx_v_calendar, int __pyx_v_settlementDays, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_daycounter, PyObject *__pyx_v_frequency, __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_redemption, __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_faceamount, PyObject *__pyx_v_accrualConvention, PyObject *__pyx_v_paymentConvention); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_6setEngine(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_8toPrice(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, PyObject *__pyx_v_bondyield); /* proto */
static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_10toYield(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, PyObject *__pyx_v_bondprice); /* proto */
static char __pyx_k_5[] = "pybg.quantlib.time.daycounters.thirty360";
static char __pyx_k_6[] = "pybg.quantlib.time.daycounters.actual_actual";
static char __pyx_k_7[] = "pybg.quantlib.time.calendars.united_states";
static char __pyx_k_8[] = "pybg.quantlib.time.calendar";
static char __pyx_k_9[] = "pybg.quantlib.time.date";
static char __pyx_k__Bond[] = "Bond";
static char __pyx_k__Euro[] = "Euro";
static char __pyx_k__ISDA[] = "ISDA";
static char __pyx_k__ISMA[] = "ISMA";
static char __pyx_k__NERC[] = "NERC";
static char __pyx_k__NYSE[] = "NYSE";
static char __pyx_k__Daily[] = "Daily";
static char __pyx_k__Annual[] = "Annual";
static char __pyx_k__Weekly[] = "Weekly";
static char __pyx_k__coupon[] = "coupon";
static char __pyx_k__Monthly[] = "Monthly";
static char __pyx_k__EUROPEAN[] = "EUROPEAN";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__calendar[] = "calendar";
static char __pyx_k__maturity[] = "maturity";
static char __pyx_k__Actual365[] = "Actual365";
static char __pyx_k__Following[] = "Following";
static char __pyx_k__Quarterly[] = "Quarterly";
static char __pyx_k__Thirty360[] = "Thirty360";
static char __pyx_k__bondprice[] = "bondprice";
static char __pyx_k__bondyield[] = "bondyield";
static char __pyx_k__frequency[] = "frequency";
static char __pyx_k__Historical[] = "Historical";
static char __pyx_k__SETTLEMENT[] = "SETTLEMENT";
static char __pyx_k__Semiannual[] = "Semiannual";
static char __pyx_k__Unadjusted[] = "Unadjusted";
static char __pyx_k__daycounter[] = "daycounter";
static char __pyx_k__faceamount[] = "faceamount";
static char __pyx_k__issue_date[] = "issue_date";
static char __pyx_k__redemption[] = "redemption";
static char __pyx_k__ActualActual[] = "ActualActual";
static char __pyx_k__UnitedStates[] = "UnitedStates";
static char __pyx_k__EUROBONDBASIS[] = "EUROBONDBASIS";
static char __pyx_k__GOVERNMENTBOND[] = "GOVERNMENTBOND";
static char __pyx_k__settlementDays[] = "settlementDays";
static char __pyx_k__ModifiedFollowing[] = "ModifiedFollowing";
static char __pyx_k__accrualConvention[] = "accrualConvention";
static char __pyx_k__paymentConvention[] = "paymentConvention";
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_n_s_6;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__Actual365;
static PyObject *__pyx_n_s__ActualActual;
static PyObject *__pyx_n_s__Annual;
static PyObject *__pyx_n_s__Bond;
static PyObject *__pyx_n_s__Daily;
static PyObject *__pyx_n_s__EUROBONDBASIS;
static PyObject *__pyx_n_s__EUROPEAN;
static PyObject *__pyx_n_s__Euro;
static PyObject *__pyx_n_s__Following;
static PyObject *__pyx_n_s__GOVERNMENTBOND;
static PyObject *__pyx_n_s__Historical;
static PyObject *__pyx_n_s__ISDA;
static PyObject *__pyx_n_s__ISMA;
static PyObject *__pyx_n_s__ModifiedFollowing;
static PyObject *__pyx_n_s__Monthly;
static PyObject *__pyx_n_s__NERC;
static PyObject *__pyx_n_s__NYSE;
static PyObject *__pyx_n_s__Quarterly;
static PyObject *__pyx_n_s__SETTLEMENT;
static PyObject *__pyx_n_s__Semiannual;
static PyObject *__pyx_n_s__Thirty360;
static PyObject *__pyx_n_s__Unadjusted;
static PyObject *__pyx_n_s__UnitedStates;
static PyObject *__pyx_n_s__Weekly;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__accrualConvention;
static PyObject *__pyx_n_s__bondprice;
static PyObject *__pyx_n_s__bondyield;
static PyObject *__pyx_n_s__calendar;
static PyObject *__pyx_n_s__coupon;
static PyObject *__pyx_n_s__daycounter;
static PyObject *__pyx_n_s__faceamount;
static PyObject *__pyx_n_s__frequency;
static PyObject *__pyx_n_s__issue_date;
static PyObject *__pyx_n_s__maturity;
static PyObject *__pyx_n_s__paymentConvention;
static PyObject *__pyx_n_s__redemption;
static PyObject *__pyx_n_s__settlementDays;
static struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_k_1;
static PyObject *__pyx_k_2;
static PyObject *__pyx_k_3;
static PyObject *__pyx_k_4;

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond___cinit__(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/bulletbond.pyx":42
 * 
 * cdef class BulletBond:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

static int __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond___cinit__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pybg/instruments/bulletbond.pyx":43
 * cdef class BulletBond:
 *     def __cinit__(self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_thisptr = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_2__dealloc__(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pybg/instruments/bulletbond.pyx":45
 *         self._thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._thisptr is not NULL:
 *             del self._thisptr
 */

static void __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_2__dealloc__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pybg/instruments/bulletbond.pyx":46
 * 
 *     def __dealloc__(self):
 *         if self._thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_thisptr != NULL);
  if (__pyx_t_1) {

    /* "pybg/instruments/bulletbond.pyx":47
 *     def __dealloc__(self):
 *         if self._thisptr is not NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
    delete __pyx_v_self->_thisptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_4pybg_11instruments_10bulletbond_Rate __pyx_v_coupon;
  PyObject *__pyx_v_maturity = 0;
  PyObject *__pyx_v_issue_date = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar *__pyx_v_calendar = 0;
  int __pyx_v_settlementDays;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_daycounter = 0;
  PyObject *__pyx_v_frequency = 0;
  __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_redemption;
  __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_faceamount;
  PyObject *__pyx_v_accrualConvention = 0;
  PyObject *__pyx_v_paymentConvention = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__coupon,&__pyx_n_s__maturity,&__pyx_n_s__issue_date,&__pyx_n_s__calendar,&__pyx_n_s__settlementDays,&__pyx_n_s__daycounter,&__pyx_n_s__frequency,&__pyx_n_s__redemption,&__pyx_n_s__faceamount,&__pyx_n_s__accrualConvention,&__pyx_n_s__paymentConvention,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[5] = (PyObject *)__pyx_k_1;
    values[6] = __pyx_k_2;
    values[9] = __pyx_k_3;
    values[10] = __pyx_k_4;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__coupon);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maturity);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__issue_date);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__calendar);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__settlementDays);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__daycounter);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__frequency);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__redemption);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__faceamount);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__accrualConvention);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__paymentConvention);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[4]) {
      } else {
        __pyx_v_settlementDays = ((int)3);
      }
      if (values[7]) {
      } else {

        /* "pybg/instruments/bulletbond.pyx":57
 *                  DayCounter daycounter=ActualActual(Bond),
 *                  frequency=Semiannual,
 *                  Real redemption=100.0,             # <<<<<<<<<<<<<<
 *                  Real faceamount=100.0,
 *                  accrualConvention=Unadjusted,
 */
        __pyx_v_redemption = ((__pyx_t_4pybg_11instruments_10bulletbond_Real)100.0);
      }
      if (values[8]) {
      } else {

        /* "pybg/instruments/bulletbond.pyx":58
 *                  frequency=Semiannual,
 *                  Real redemption=100.0,
 *                  Real faceamount=100.0,             # <<<<<<<<<<<<<<
 *                  accrualConvention=Unadjusted,
 *                  paymentConvention=Unadjusted
 */
        __pyx_v_faceamount = ((__pyx_t_4pybg_11instruments_10bulletbond_Real)100.0);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coupon = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_coupon == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_maturity = values[1];
    __pyx_v_issue_date = values[2];
    __pyx_v_calendar = ((struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar *)values[3]);
    if (values[4]) {
      __pyx_v_settlementDays = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_settlementDays == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_settlementDays = ((int)3);
    }
    __pyx_v_daycounter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[5]);
    __pyx_v_frequency = values[6];
    if (values[7]) {
      __pyx_v_redemption = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_redemption == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/bulletbond.pyx":57
 *                  DayCounter daycounter=ActualActual(Bond),
 *                  frequency=Semiannual,
 *                  Real redemption=100.0,             # <<<<<<<<<<<<<<
 *                  Real faceamount=100.0,
 *                  accrualConvention=Unadjusted,
 */
      __pyx_v_redemption = ((__pyx_t_4pybg_11instruments_10bulletbond_Real)100.0);
    }
    if (values[8]) {
      __pyx_v_faceamount = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_faceamount == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pybg/instruments/bulletbond.pyx":58
 *                  frequency=Semiannual,
 *                  Real redemption=100.0,
 *                  Real faceamount=100.0,             # <<<<<<<<<<<<<<
 *                  accrualConvention=Unadjusted,
 *                  paymentConvention=Unadjusted
 */
      __pyx_v_faceamount = ((__pyx_t_4pybg_11instruments_10bulletbond_Real)100.0);
    }
    __pyx_v_accrualConvention = values[9];
    __pyx_v_paymentConvention = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_calendar), __pyx_ptype_4pybg_8quantlib_4time_8calendar_Calendar, 1, "calendar", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_daycounter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "daycounter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_4__init__(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self), __pyx_v_coupon, __pyx_v_maturity, __pyx_v_issue_date, __pyx_v_calendar, __pyx_v_settlementDays, __pyx_v_daycounter, __pyx_v_frequency, __pyx_v_redemption, __pyx_v_faceamount, __pyx_v_accrualConvention, __pyx_v_paymentConvention);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/bulletbond.pyx":49
 *             del self._thisptr
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Rate coupon,
 *                  object maturity,
 */

static int __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_4__init__(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, __pyx_t_4pybg_11instruments_10bulletbond_Rate __pyx_v_coupon, PyObject *__pyx_v_maturity, PyObject *__pyx_v_issue_date, struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar *__pyx_v_calendar, int __pyx_v_settlementDays, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_daycounter, PyObject *__pyx_v_frequency, __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_redemption, __pyx_t_4pybg_11instruments_10bulletbond_Real __pyx_v_faceamount, PyObject *__pyx_v_accrualConvention, PyObject *__pyx_v_paymentConvention) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum QuantLib::Frequency __pyx_t_1;
  enum QuantLib::BusinessDayConvention __pyx_t_2;
  enum QuantLib::BusinessDayConvention __pyx_t_3;
  bondgeek::BulletBond *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybg/instruments/bulletbond.pyx":71
 *                        settlementDays,
 *                        deref(daycounter._thisptr),
 *                        <_Frequency>frequency,             # <<<<<<<<<<<<<<
 *                        redemption,
 *                        faceamount,
 */
  __pyx_t_1 = ((enum QuantLib::Frequency)PyInt_AsLong(__pyx_v_frequency)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/bulletbond.pyx":74
 *                        redemption,
 *                        faceamount,
 *                        <_BusinessDayConvention>accrualConvention,             # <<<<<<<<<<<<<<
 *                        <_BusinessDayConvention>paymentConvention,
 *                        ))
 */
  __pyx_t_2 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_accrualConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pybg/instruments/bulletbond.pyx":75
 *                        faceamount,
 *                        <_BusinessDayConvention>accrualConvention,
 *                        <_BusinessDayConvention>paymentConvention,             # <<<<<<<<<<<<<<
 *                        ))
 * 
 */
  __pyx_t_3 = ((enum QuantLib::BusinessDayConvention)PyInt_AsLong(__pyx_v_paymentConvention)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_4 = new bondgeek::BulletBond(__pyx_v_coupon, __pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_maturity), __pyx_f_4pybg_2ql__qldate_from_pydate(__pyx_v_issue_date), (*__pyx_v_calendar->_thisptr), __pyx_v_settlementDays, (*__pyx_v_daycounter->_thisptr), ((enum QuantLib::Frequency)__pyx_t_1), __pyx_v_redemption, __pyx_v_faceamount, ((enum QuantLib::BusinessDayConvention)__pyx_t_2), ((enum QuantLib::BusinessDayConvention)__pyx_t_3));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "pybg/instruments/bulletbond.pyx":63
 *                  ):
 * 
 *         self._thisptr = new shared_ptr[_bulletbond.BulletBond]( \             # <<<<<<<<<<<<<<
 *             new _bulletbond.BulletBond(
 *                        coupon,
 */
  __pyx_v_self->_thisptr = new boost::shared_ptr<bondgeek::BulletBond>(__pyx_t_4);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_7setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_7setEngine(PyObject *__pyx_v_self, PyObject *__pyx_v_crv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_crv), __pyx_ptype_4pybg_6curves_RateHelperCurve, 1, "crv", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_6setEngine(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self), ((struct __pyx_obj_4pybg_6curves_RateHelperCurve *)__pyx_v_crv));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/instruments/bulletbond.pyx":78
 *                        ))
 * 
 *     def setEngine(self, curves.RateHelperCurve crv):             # <<<<<<<<<<<<<<
 *         cdef _curves.RateHelperCurve _crv
 * 
 */

static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_6setEngine(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, struct __pyx_obj_4pybg_6curves_RateHelperCurve *__pyx_v_crv) {
  bondgeek::RateHelperCurve __pyx_v__crv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEngine", 0);

  /* "pybg/instruments/bulletbond.pyx":81
 *         cdef _curves.RateHelperCurve _crv
 * 
 *         _crv = deref(crv._thisptr.get())             # <<<<<<<<<<<<<<
 * 
 *         self._thisptr.get().setEngine(_crv)
 */
  __pyx_v__crv = (*__pyx_v_crv->_thisptr->get());

  /* "pybg/instruments/bulletbond.pyx":83
 *         _crv = deref(crv._thisptr.get())
 * 
 *         self._thisptr.get().setEngine(_crv)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_thisptr->get()->setEngine(__pyx_v__crv);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_9toPrice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_9toPrice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bondyield = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bondyield,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toPrice (wrapper)", 0);
  {
    PyObject* values[1] = {0};

    /* "pybg/instruments/bulletbond.pyx":86
 * 
 * 
 *     def toPrice(self, bondyield=None):             # <<<<<<<<<<<<<<
 *         if bondyield:
 *             return self._thisptr.get().toPrice(bondyield)
 */
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bondyield);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "toPrice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bondyield = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("toPrice", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.toPrice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_8toPrice(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self), __pyx_v_bondyield);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_8toPrice(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, PyObject *__pyx_v_bondyield) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4pybg_11instruments_11_bulletbond_Real __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toPrice", 0);

  /* "pybg/instruments/bulletbond.pyx":87
 * 
 *     def toPrice(self, bondyield=None):
 *         if bondyield:             # <<<<<<<<<<<<<<
 *             return self._thisptr.get().toPrice(bondyield)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_bondyield); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pybg/instruments/bulletbond.pyx":88
 *     def toPrice(self, bondyield=None):
 *         if bondyield:
 *             return self._thisptr.get().toPrice(bondyield)             # <<<<<<<<<<<<<<
 *         else:
 *             return self._thisptr.get().toPrice()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_bondyield); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_thisptr->get()->toPrice(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pybg/instruments/bulletbond.pyx":90
 *             return self._thisptr.get().toPrice(bondyield)
 *         else:
 *             return self._thisptr.get().toPrice()             # <<<<<<<<<<<<<<
 * 
 *     def toYield(self, bondprice=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_thisptr->get()->toPrice()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.toPrice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_11toYield(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_11toYield(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bondprice = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bondprice,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toYield (wrapper)", 0);
  {
    PyObject* values[1] = {0};

    /* "pybg/instruments/bulletbond.pyx":92
 *             return self._thisptr.get().toPrice()
 * 
 *     def toYield(self, bondprice=None):             # <<<<<<<<<<<<<<
 *         if bondprice:
 *             return self._thisptr.get().toYield(bondprice)
 */
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bondprice);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "toYield") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bondprice = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("toYield", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.toYield", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_10toYield(((struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *)__pyx_v_self), __pyx_v_bondprice);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4pybg_11instruments_10bulletbond_10BulletBond_10toYield(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond *__pyx_v_self, PyObject *__pyx_v_bondprice) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4pybg_11instruments_11_bulletbond_Rate __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toYield", 0);

  /* "pybg/instruments/bulletbond.pyx":93
 * 
 *     def toYield(self, bondprice=None):
 *         if bondprice:             # <<<<<<<<<<<<<<
 *             return self._thisptr.get().toYield(bondprice)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_bondprice); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pybg/instruments/bulletbond.pyx":94
 *     def toYield(self, bondprice=None):
 *         if bondprice:
 *             return self._thisptr.get().toYield(bondprice)             # <<<<<<<<<<<<<<
 *         else:
 *             return self._thisptr.get().toYield()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_bondprice); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_thisptr->get()->toYield(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pybg/instruments/bulletbond.pyx":96
 *             return self._thisptr.get().toYield(bondprice)
 *         else:
 *             return self._thisptr.get().toYield()             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_thisptr->get()->toYield()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybg.instruments.bulletbond.BulletBond.toYield", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4pybg_11instruments_10bulletbond_BulletBond(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4pybg_11instruments_10bulletbond_BulletBond(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4pybg_11instruments_10bulletbond_BulletBond[] = {
  {__Pyx_NAMESTR("setEngine"), (PyCFunction)__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_7setEngine, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("toPrice"), (PyCFunction)__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_9toPrice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("toYield"), (PyCFunction)__pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_11toYield, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BulletBond = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BulletBond = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BulletBond = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BulletBond = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_11instruments_10bulletbond_BulletBond = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.instruments.bulletbond.BulletBond"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_11instruments_10bulletbond_BulletBond), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_11instruments_10bulletbond_BulletBond, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BulletBond, /*tp_as_number*/
  &__pyx_tp_as_sequence_BulletBond, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BulletBond, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BulletBond, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Bullet Bond Structure\n    \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_11instruments_10bulletbond_BulletBond, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_11instruments_10bulletbond_10BulletBond_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_11instruments_10bulletbond_BulletBond, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("bulletbond"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_n_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 1},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__Actual365, __pyx_k__Actual365, sizeof(__pyx_k__Actual365), 0, 0, 1, 1},
  {&__pyx_n_s__ActualActual, __pyx_k__ActualActual, sizeof(__pyx_k__ActualActual), 0, 0, 1, 1},
  {&__pyx_n_s__Annual, __pyx_k__Annual, sizeof(__pyx_k__Annual), 0, 0, 1, 1},
  {&__pyx_n_s__Bond, __pyx_k__Bond, sizeof(__pyx_k__Bond), 0, 0, 1, 1},
  {&__pyx_n_s__Daily, __pyx_k__Daily, sizeof(__pyx_k__Daily), 0, 0, 1, 1},
  {&__pyx_n_s__EUROBONDBASIS, __pyx_k__EUROBONDBASIS, sizeof(__pyx_k__EUROBONDBASIS), 0, 0, 1, 1},
  {&__pyx_n_s__EUROPEAN, __pyx_k__EUROPEAN, sizeof(__pyx_k__EUROPEAN), 0, 0, 1, 1},
  {&__pyx_n_s__Euro, __pyx_k__Euro, sizeof(__pyx_k__Euro), 0, 0, 1, 1},
  {&__pyx_n_s__Following, __pyx_k__Following, sizeof(__pyx_k__Following), 0, 0, 1, 1},
  {&__pyx_n_s__GOVERNMENTBOND, __pyx_k__GOVERNMENTBOND, sizeof(__pyx_k__GOVERNMENTBOND), 0, 0, 1, 1},
  {&__pyx_n_s__Historical, __pyx_k__Historical, sizeof(__pyx_k__Historical), 0, 0, 1, 1},
  {&__pyx_n_s__ISDA, __pyx_k__ISDA, sizeof(__pyx_k__ISDA), 0, 0, 1, 1},
  {&__pyx_n_s__ISMA, __pyx_k__ISMA, sizeof(__pyx_k__ISMA), 0, 0, 1, 1},
  {&__pyx_n_s__ModifiedFollowing, __pyx_k__ModifiedFollowing, sizeof(__pyx_k__ModifiedFollowing), 0, 0, 1, 1},
  {&__pyx_n_s__Monthly, __pyx_k__Monthly, sizeof(__pyx_k__Monthly), 0, 0, 1, 1},
  {&__pyx_n_s__NERC, __pyx_k__NERC, sizeof(__pyx_k__NERC), 0, 0, 1, 1},
  {&__pyx_n_s__NYSE, __pyx_k__NYSE, sizeof(__pyx_k__NYSE), 0, 0, 1, 1},
  {&__pyx_n_s__Quarterly, __pyx_k__Quarterly, sizeof(__pyx_k__Quarterly), 0, 0, 1, 1},
  {&__pyx_n_s__SETTLEMENT, __pyx_k__SETTLEMENT, sizeof(__pyx_k__SETTLEMENT), 0, 0, 1, 1},
  {&__pyx_n_s__Semiannual, __pyx_k__Semiannual, sizeof(__pyx_k__Semiannual), 0, 0, 1, 1},
  {&__pyx_n_s__Thirty360, __pyx_k__Thirty360, sizeof(__pyx_k__Thirty360), 0, 0, 1, 1},
  {&__pyx_n_s__Unadjusted, __pyx_k__Unadjusted, sizeof(__pyx_k__Unadjusted), 0, 0, 1, 1},
  {&__pyx_n_s__UnitedStates, __pyx_k__UnitedStates, sizeof(__pyx_k__UnitedStates), 0, 0, 1, 1},
  {&__pyx_n_s__Weekly, __pyx_k__Weekly, sizeof(__pyx_k__Weekly), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__accrualConvention, __pyx_k__accrualConvention, sizeof(__pyx_k__accrualConvention), 0, 0, 1, 1},
  {&__pyx_n_s__bondprice, __pyx_k__bondprice, sizeof(__pyx_k__bondprice), 0, 0, 1, 1},
  {&__pyx_n_s__bondyield, __pyx_k__bondyield, sizeof(__pyx_k__bondyield), 0, 0, 1, 1},
  {&__pyx_n_s__calendar, __pyx_k__calendar, sizeof(__pyx_k__calendar), 0, 0, 1, 1},
  {&__pyx_n_s__coupon, __pyx_k__coupon, sizeof(__pyx_k__coupon), 0, 0, 1, 1},
  {&__pyx_n_s__daycounter, __pyx_k__daycounter, sizeof(__pyx_k__daycounter), 0, 0, 1, 1},
  {&__pyx_n_s__faceamount, __pyx_k__faceamount, sizeof(__pyx_k__faceamount), 0, 0, 1, 1},
  {&__pyx_n_s__frequency, __pyx_k__frequency, sizeof(__pyx_k__frequency), 0, 0, 1, 1},
  {&__pyx_n_s__issue_date, __pyx_k__issue_date, sizeof(__pyx_k__issue_date), 0, 0, 1, 1},
  {&__pyx_n_s__maturity, __pyx_k__maturity, sizeof(__pyx_k__maturity), 0, 0, 1, 1},
  {&__pyx_n_s__paymentConvention, __pyx_k__paymentConvention, sizeof(__pyx_k__paymentConvention), 0, 0, 1, 1},
  {&__pyx_n_s__redemption, __pyx_k__redemption, sizeof(__pyx_k__redemption), 0, 0, 1, 1},
  {&__pyx_n_s__settlementDays, __pyx_k__settlementDays, sizeof(__pyx_k__settlementDays), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initbulletbond(void); /*proto*/
PyMODINIT_FUNC initbulletbond(void)
#else
PyMODINIT_FUNC PyInit_bulletbond(void); /*proto*/
PyMODINIT_FUNC PyInit_bulletbond(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_bulletbond(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("bulletbond"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pybg__instruments__bulletbond) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4pybg_11instruments_10bulletbond_BulletBond) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BulletBond", (PyObject *)&__pyx_type_4pybg_11instruments_10bulletbond_BulletBond) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_11instruments_10bulletbond_BulletBond = &__pyx_type_4pybg_11instruments_10bulletbond_BulletBond;
  /*--- Type import code ---*/
  __pyx_ptype_4pybg_8quantlib_4time_4date_Period = __Pyx_ImportType("pybg.quantlib.time.date", "Period", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Period), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Period)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_4date_Date = __Pyx_ImportType("pybg.quantlib.time.date", "Date", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Date), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Date)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = __Pyx_ImportType("pybg.quantlib.time.daycounter", "DayCounter", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_8calendar_Calendar = __Pyx_ImportType("pybg.quantlib.time.calendar", "Calendar", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_Calendar), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_8calendar_Calendar)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_8calendar_TARGET = __Pyx_ImportType("pybg.quantlib.time.calendar", "TARGET", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_TARGET), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_8calendar_TARGET)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedStates = __Pyx_ImportType("pybg.quantlib.time.calendar", "UnitedStates", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedStates), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedStates)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedKingdom = __Pyx_ImportType("pybg.quantlib.time.calendar", "UnitedKingdom", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_UnitedKingdom), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_8calendar_UnitedKingdom)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_8calendar_DateList = __Pyx_ImportType("pybg.quantlib.time.calendar", "DateList", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_8calendar_DateList), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_8calendar_DateList)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4pybg_8quantlib_4time_8calendar_DateList = (struct __pyx_vtabstruct_4pybg_8quantlib_4time_8calendar_DateList*)__Pyx_GetVtable(__pyx_ptype_4pybg_8quantlib_4time_8calendar_DateList->tp_dict); if (unlikely(!__pyx_vtabptr_4pybg_8quantlib_4time_8calendar_DateList)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_6curves_CurveBase = __Pyx_ImportType("pybg.curves", "CurveBase", sizeof(struct __pyx_obj_4pybg_6curves_CurveBase), 1); if (unlikely(!__pyx_ptype_4pybg_6curves_CurveBase)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_6curves_RateHelperCurve = __Pyx_ImportType("pybg.curves", "RateHelperCurve", sizeof(struct __pyx_obj_4pybg_6curves_RateHelperCurve), 1); if (unlikely(!__pyx_ptype_4pybg_6curves_RateHelperCurve)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("pybg.ql"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_pydate_from_qldate", (void (**)(void))&__pyx_f_4pybg_2ql__pydate_from_qldate, "PyObject *(QuantLib::Date)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_qldate_from_pydate", (void (**)(void))&__pyx_f_4pybg_2ql__qldate_from_pydate, "QuantLib::Date (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "pybg/instruments/bulletbond.pyx":19
 * from pybg.quantlib.time.daycounter cimport DayCounter
 * from pybg.quantlib.time.daycounters.thirty360 import (
 *         Thirty360, EUROBONDBASIS, EUROPEAN             # <<<<<<<<<<<<<<
 * )
 * from pybg.quantlib.time.daycounters.actual_actual import (
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Thirty360));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__Thirty360));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Thirty360));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__EUROBONDBASIS));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__EUROBONDBASIS));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__EUROBONDBASIS));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__EUROPEAN));
  PyList_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_n_s__EUROPEAN));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__EUROPEAN));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_5), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Thirty360);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Thirty360);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Thirty360, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__EUROBONDBASIS);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__EUROBONDBASIS);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EUROBONDBASIS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__EUROPEAN);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__EUROPEAN);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EUROPEAN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybg/instruments/bulletbond.pyx":22
 * )
 * from pybg.quantlib.time.daycounters.actual_actual import (
 *         Bond, Euro, Historical, ISDA, ISMA, ActualActual, Actual365             # <<<<<<<<<<<<<<
 * )
 * from pybg.quantlib.time.calendars.united_states import (
 */
  __pyx_t_3 = PyList_New(7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Bond));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__Bond));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Bond));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Euro));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_n_s__Euro));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Euro));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Historical));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_n_s__Historical));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Historical));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ISDA));
  PyList_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_n_s__ISDA));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ISDA));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ISMA));
  PyList_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_n_s__ISMA));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ISMA));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ActualActual));
  PyList_SET_ITEM(__pyx_t_3, 5, ((PyObject *)__pyx_n_s__ActualActual));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ActualActual));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Actual365));
  PyList_SET_ITEM(__pyx_t_3, 6, ((PyObject *)__pyx_n_s__Actual365));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Actual365));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_6), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Bond);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Bond);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Bond, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Euro);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Euro);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Euro, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Historical);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Historical);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Historical, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ISDA);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__ISDA);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ISDA, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ISMA);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__ISMA);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ISMA, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ActualActual);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__ActualActual);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ActualActual, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Actual365);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Actual365);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Actual365, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":25
 * )
 * from pybg.quantlib.time.calendars.united_states import (
 *         UnitedStates, GOVERNMENTBOND, NYSE, SETTLEMENT, NERC             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__UnitedStates));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__UnitedStates));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__UnitedStates));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__GOVERNMENTBOND));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__GOVERNMENTBOND));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__GOVERNMENTBOND));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NYSE));
  PyList_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_n_s__NYSE));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NYSE));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__SETTLEMENT));
  PyList_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_n_s__SETTLEMENT));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SETTLEMENT));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NERC));
  PyList_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_n_s__NERC));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NERC));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_7), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__UnitedStates);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__UnitedStates);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__UnitedStates, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__GOVERNMENTBOND);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__GOVERNMENTBOND);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__GOVERNMENTBOND, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__NYSE);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__NYSE);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NYSE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__SETTLEMENT);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__SETTLEMENT);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__SETTLEMENT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__NERC);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__NERC);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NERC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybg/instruments/bulletbond.pyx":30
 * from pybg.quantlib.time.calendar cimport Calendar
 * from pybg.quantlib.time.calendar import (
 *     Following, ModifiedFollowing, Unadjusted             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Following));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__Following));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Following));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ModifiedFollowing));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_n_s__ModifiedFollowing));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ModifiedFollowing));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Unadjusted));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_n_s__Unadjusted));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Unadjusted));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_8), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Following);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Following);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Following, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ModifiedFollowing);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__ModifiedFollowing);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ModifiedFollowing, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Unadjusted);
  if (__pyx_t_3 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Unadjusted);
    if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Unadjusted, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":34
 * 
 * from pybg.quantlib.time.date import (
 *     Annual, Semiannual, Quarterly, Monthly, Weekly, Daily             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_2 = PyList_New(6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Annual));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__Annual));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Annual));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Semiannual));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__Semiannual));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Semiannual));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Quarterly));
  PyList_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_n_s__Quarterly));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Quarterly));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Monthly));
  PyList_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_n_s__Monthly));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Monthly));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Weekly));
  PyList_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_n_s__Weekly));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Weekly));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Daily));
  PyList_SET_ITEM(__pyx_t_2, 5, ((PyObject *)__pyx_n_s__Daily));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Daily));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_9), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Annual);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Annual);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Annual, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Semiannual);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Semiannual);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Semiannual, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Quarterly);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Quarterly);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Quarterly, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Monthly);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Monthly);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Monthly, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Weekly);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Weekly);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Weekly, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__Daily);
  if (__pyx_t_2 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__Daily);
    if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Daily, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybg/instruments/bulletbond.pyx":55
 *                  Calendar calendar,
 *                  int settlementDays=3,
 *                  DayCounter daycounter=ActualActual(Bond),             # <<<<<<<<<<<<<<
 *                  frequency=Semiannual,
 *                  Real redemption=100.0,
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__ActualActual); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__Bond); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_1 = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":56
 *                  int settlementDays=3,
 *                  DayCounter daycounter=ActualActual(Bond),
 *                  frequency=Semiannual,             # <<<<<<<<<<<<<<
 *                  Real redemption=100.0,
 *                  Real faceamount=100.0,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__Semiannual); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k_2 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":59
 *                  Real redemption=100.0,
 *                  Real faceamount=100.0,
 *                  accrualConvention=Unadjusted,             # <<<<<<<<<<<<<<
 *                  paymentConvention=Unadjusted
 *                  ):
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__Unadjusted); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k_3 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":61
 *                  accrualConvention=Unadjusted,
 *                  paymentConvention=Unadjusted
 *                  ):             # <<<<<<<<<<<<<<
 * 
 *         self._thisptr = new shared_ptr[_bulletbond.BulletBond]( \
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__Unadjusted); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k_4 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybg/instruments/bulletbond.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: libraries = QuantLib
 * 
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pybg.instruments.bulletbond", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pybg.instruments.bulletbond");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                /* try package relative import first */
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && (size_t)((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
