/* Generated by Cython 0.16 on Sun Jul 22 16:12:27 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pybg__quantlib__termstructures__yields__piecewise_yield_curve
#define __PYX_HAVE_API__pybg__quantlib__termstructures__yields__piecewise_yield_curve
#include <vector>
#include <string>
#include "boost/shared_ptr.hpp"
#include "ql/handle.hpp"
#include "ql/time/frequency.hpp"
#include "ql/time/timeunit.hpp"
#include "ql/time/period.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "ostream"
#include "ql/time/weekday.hpp"
#include "ql/time/date.hpp"
#include "string"
#include "ql/time/businessdayconvention.hpp"
#include "ql/time/calendar.hpp"
#include "ql/time/calendars/target.hpp"
#include "ql/time/daycounter.hpp"
#include "ql/time/daycounters/thirty360.hpp"
#include "ql/time/daycounters/actual360.hpp"
#include "ql/time/daycounters/actual365fixed.hpp"
#include "ql/time/daycounters/business252.hpp"
#include "ql/time/daycounters/one.hpp"
#include "ql/time/daycounters/simpledaycounter.hpp"
#include "ql/quote.hpp"
#include "ql/quotes/simplequote.hpp"
#include "ql/compounding.hpp"
#include "ql/termstructures/yieldtermstructure.hpp"
#include "ql/termstructures/yield/flatforward.hpp"
#include "ql/termstructures/yield/ratehelpers.hpp"
#include "_piecewise_support_code.hpp"
#include "ql/termstructures/yield/piecewiseyieldcurve.hpp"
#include "ql/currency.hpp"
#include "ql/currencies/america.hpp"
#include "ql/currencies/europe.hpp"
#include "ql/index.hpp"
#include "ql/indexes/interestrateindex.hpp"
#include "ql/indexes/iborindex.hpp"
#include "ql/termstructures/bootstraphelper.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "piecewise_yield_curve.pyx",
  "rate_helpers.pxd",
  "date.pxd",
  "daycounter.pxd",
  "yield_term_structure.pxd",
};

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_7_period_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_7_period_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_7_period_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_7_period_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_5_date_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_5_date_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_5_date_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_5_date_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_9_calendar_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_9_calendar_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_11_daycounter_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_quote_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_quote_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_quote_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_quote_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_22_piecewise_yield_curve_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_9_currency_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_9_currency_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_9_currency_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_9_currency_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_rate_helpers_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_DiscountFactor;

/*--- Type declarations ---*/
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper;
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period;
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter;
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper;
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date;

/* "rate_helpers.pxd":4
 * from pybg.quantlib.handle cimport shared_ptr
 * 
 * cdef class RateHelper:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_rh.RateHelper]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::RateHelper> *_thisptr;
};


/* "pybg/quantlib/termstructures/yields/yield_term_structure.pxd":5
 * from pybg.quantlib.handle cimport shared_ptr, RelinkableHandle
 * 
 * cdef class YieldTermStructure:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_ff.YieldTermStructure]* _thisptr
 *     cdef RelinkableHandle[_ff.YieldTermStructure]* _relinkable_ptr
 */
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::YieldTermStructure> *_thisptr;
  QuantLib::RelinkableHandle<QuantLib::YieldTermStructure> *_relinkable_ptr;
  bool relinkable;
};


/* "pybg/quantlib/time/date.pxd":17
 * 
 * 
 * cdef class Period:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Period {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Period> *_thisptr;
};


/* "pybg/quantlib/time/daycounter.pxd":3
 * cimport pybg.quantlib.time._daycounter as _daycounter
 * 
 * cdef class DayCounter:             # <<<<<<<<<<<<<<
 * 
 *     cdef _daycounter.DayCounter* _thisptr
 */
struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter {
  PyObject_HEAD
  QuantLib::DayCounter *_thisptr;
};


/* "rate_helpers.pxd":7
 *     cdef shared_ptr[_rh.RateHelper]* _thisptr
 * 
 * cdef class RelativeDateRateHelper:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_rh.RelativeDateRateHelper]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::RelativeDateRateHelper> *_thisptr;
};


/* "pybg/quantlib/time/date.pxd":20
 *     cdef shared_ptr[_period.Period]* _thisptr
 * 
 * cdef class Date:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_date.Date]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_4time_4date_Date {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Date> *_thisptr;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE int __Pyx_NegateNonNeg(int b) {
    return unlikely(b < 0) ? b : !b;
}
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'pybg.quantlib.handle' */

/* Module declarations from 'pybg.quantlib.time._period' */

/* Module declarations from 'pybg.quantlib.time._date' */

/* Module declarations from 'pybg.quantlib.time._calendar' */

/* Module declarations from 'pybg.quantlib.time._daycounter' */

/* Module declarations from 'pybg.quantlib._quote' */

/* Module declarations from 'pybg.quantlib.termstructures.yields._flat_forward' */

/* Module declarations from 'pybg.quantlib.termstructures.yields._piecewise_yield_curve' */

/* Module declarations from 'pybg.quantlib._currency' */

/* Module declarations from 'pybg.quantlib._index' */

/* Module declarations from 'pybg.quantlib.indexes._interest_rate_index' */

/* Module declarations from 'pybg.quantlib.indexes._ibor_index' */

/* Module declarations from 'pybg.quantlib.termstructures.yields._rate_helpers' */

/* Module declarations from 'pybg.quantlib.termstructures.yields.rate_helpers' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper = 0;

/* Module declarations from 'pybg.quantlib.time.date' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Period = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_4date_Date = 0;

/* Module declarations from 'pybg.quantlib.time.daycounter' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = 0;

/* Module declarations from 'pybg.quantlib.termstructures.yields.yield_term_structure' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure = 0;

/* Module declarations from 'pybg.quantlib.termstructures.yields.piecewise_yield_curve' */
#define __Pyx_MODULE_NAME "pybg.quantlib.termstructures.yields.piecewise_yield_curve"
int __pyx_module_is_main_pybg__quantlib__termstructures__yields__piecewise_yield_curve = 0;

/* Implementation of 'pybg.quantlib.termstructures.yields.piecewise_yield_curve' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_format;
static PyObject *__pyx_pf_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_term_structure_factory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_traits, PyObject *__pyx_v_interpolator, struct __pyx_obj_4pybg_8quantlib_4time_4date_Date *__pyx_v_settlement_date, PyObject *__pyx_v_rate_helpers, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_day_counter, __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real __pyx_v_tolerance); /* proto */
static char __pyx_k_1[] = "Traits must be in {}";
static char __pyx_k_2[] = "Interpolator must be one of {}";
static char __pyx_k_5[] = "term_structure_factory";
static char __pyx_k_6[] = "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx";
static char __pyx_k_7[] = "pybg.quantlib.termstructures.yields.piecewise_yield_curve";
static char __pyx_k__s_pt[] = "s_pt";
static char __pyx_k__zero[] = "zero";
static char __pyx_k__format[] = "format";
static char __pyx_k__helper[] = "helper";
static char __pyx_k__linear[] = "linear";
static char __pyx_k__spline[] = "spline";
static char __pyx_k__traits[] = "traits";
static char __pyx_k__ts_ptr[] = "ts_ptr";
static char __pyx_k__forward[] = "forward";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__discount[] = "discount";
static char __pyx_k__loglinear[] = "loglinear";
static char __pyx_k__tolerance[] = "tolerance";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__relinkable[] = "relinkable";
static char __pyx_k__day_counter[] = "day_counter";
static char __pyx_k__VALID_TRAITS[] = "VALID_TRAITS";
static char __pyx_k__curve_inputs[] = "curve_inputs";
static char __pyx_k__interpolator[] = "interpolator";
static char __pyx_k__rate_helpers[] = "rate_helpers";
static char __pyx_k__traits_string[] = "traits_string";
static char __pyx_k__term_structure[] = "term_structure";
static char __pyx_k__settlement_date[] = "settlement_date";
static char __pyx_k__VALID_INTERPOLATORS[] = "VALID_INTERPOLATORS";
static char __pyx_k__interpolator_string[] = "interpolator_string";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_n_s__VALID_INTERPOLATORS;
static PyObject *__pyx_n_s__VALID_TRAITS;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__curve_inputs;
static PyObject *__pyx_n_s__day_counter;
static PyObject *__pyx_n_s__discount;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__forward;
static PyObject *__pyx_n_s__helper;
static PyObject *__pyx_n_s__interpolator;
static PyObject *__pyx_n_s__interpolator_string;
static PyObject *__pyx_n_s__linear;
static PyObject *__pyx_n_s__loglinear;
static PyObject *__pyx_n_s__rate_helpers;
static PyObject *__pyx_n_s__relinkable;
static PyObject *__pyx_n_s__s_pt;
static PyObject *__pyx_n_s__settlement_date;
static PyObject *__pyx_n_s__spline;
static PyObject *__pyx_n_s__term_structure;
static PyObject *__pyx_n_s__tolerance;
static PyObject *__pyx_n_s__traits;
static PyObject *__pyx_n_s__traits_string;
static PyObject *__pyx_n_s__ts_ptr;
static PyObject *__pyx_n_s__zero;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_codeobj_4;

/* Python wrapper */
static PyObject *__pyx_pw_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_1term_structure_factory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_term_structure_factory[] = " Returns a YieldTermStructure based on the piecewise yield curve information provided\n    as input.\n\n    ";
static PyMethodDef __pyx_mdef_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_1term_structure_factory = {__Pyx_NAMESTR("term_structure_factory"), (PyCFunction)__pyx_pw_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_1term_structure_factory, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_term_structure_factory)};
static PyObject *__pyx_pw_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_1term_structure_factory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_traits = 0;
  PyObject *__pyx_v_interpolator = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_4date_Date *__pyx_v_settlement_date = 0;
  PyObject *__pyx_v_rate_helpers = 0;
  struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_day_counter = 0;
  __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real __pyx_v_tolerance;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__traits,&__pyx_n_s__interpolator,&__pyx_n_s__settlement_date,&__pyx_n_s__rate_helpers,&__pyx_n_s__day_counter,&__pyx_n_s__tolerance,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_structure_factory (wrapper)", 0);
  __pyx_self = __pyx_self;
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__traits);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__interpolator);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("term_structure_factory", 0, 5, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__settlement_date);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("term_structure_factory", 0, 5, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rate_helpers);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("term_structure_factory", 0, 5, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__day_counter);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("term_structure_factory", 0, 5, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tolerance);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "term_structure_factory") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[5]) {
      } else {

        /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":22
 * 
 * def term_structure_factory(str traits, str interpolator, Date settlement_date,
 *     rate_helpers, DayCounter day_counter, Real tolerance=1.0e-12):             # <<<<<<<<<<<<<<
 *     """ Returns a YieldTermStructure based on the piecewise yield curve information provided
 *     as input.
 */
        __pyx_v_tolerance = ((__pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real)1.0e-12);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_traits = ((PyObject*)values[0]);
    __pyx_v_interpolator = ((PyObject*)values[1]);
    __pyx_v_settlement_date = ((struct __pyx_obj_4pybg_8quantlib_4time_4date_Date *)values[2]);
    __pyx_v_rate_helpers = values[3];
    __pyx_v_day_counter = ((struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *)values[4]);
    if (values[5]) {
      __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_tolerance = ((__pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real)1.0e-12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("term_structure_factory", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.quantlib.termstructures.yields.piecewise_yield_curve.term_structure_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_traits), (&PyString_Type), 1, "traits", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interpolator), (&PyString_Type), 1, "interpolator", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_settlement_date), __pyx_ptype_4pybg_8quantlib_4time_4date_Date, 1, "settlement_date", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_day_counter), __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter, 1, "day_counter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_term_structure_factory(__pyx_self, __pyx_v_traits, __pyx_v_interpolator, __pyx_v_settlement_date, __pyx_v_rate_helpers, __pyx_v_day_counter, __pyx_v_tolerance);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":21
 * VALID_INTERPOLATORS = ['loglinear', 'linear', 'spline']
 * 
 * def term_structure_factory(str traits, str interpolator, Date settlement_date,             # <<<<<<<<<<<<<<
 *     rate_helpers, DayCounter day_counter, Real tolerance=1.0e-12):
 *     """ Returns a YieldTermStructure based on the piecewise yield curve information provided
 */

static PyObject *__pyx_pf_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_term_structure_factory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_traits, PyObject *__pyx_v_interpolator, struct __pyx_obj_4pybg_8quantlib_4time_4date_Date *__pyx_v_settlement_date, PyObject *__pyx_v_rate_helpers, struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter *__pyx_v_day_counter, __pyx_t_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_Real __pyx_v_tolerance) {
  std::vector<boost::shared_ptr<struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper *> > *__pyx_v_curve_inputs;
  PyObject *__pyx_v_helper = NULL;
  std::string __pyx_v_traits_string;
  std::string __pyx_v_interpolator_string;
  boost::shared_ptr<QuantLib::YieldTermStructure> __pyx_v_ts_ptr;
  struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *__pyx_v_term_structure = NULL;
  boost::shared_ptr<QuantLib::YieldTermStructure> *__pyx_v_s_pt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  char *__pyx_t_7;
  boost::shared_ptr<QuantLib::YieldTermStructure> __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("term_structure_factory", 0);

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":29
 * 
 *     # validate inputs
 *     if traits not in VALID_TRAITS:             # <<<<<<<<<<<<<<
 *         raise ValueError('Traits must be in {}',format(VALID_TRAITS))
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__VALID_TRAITS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_t_1, ((PyObject *)__pyx_v_traits)))); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":30
 *     # validate inputs
 *     if traits not in VALID_TRAITS:
 *         raise ValueError('Traits must be in {}',format(VALID_TRAITS))             # <<<<<<<<<<<<<<
 * 
 *     if interpolator not in VALID_INTERPOLATORS:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__VALID_TRAITS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_format, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":32
 *         raise ValueError('Traits must be in {}',format(VALID_TRAITS))
 * 
 *     if interpolator not in VALID_INTERPOLATORS:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             'Interpolator must be one of {}'.format(VALID_INTERPOLATORS)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__VALID_INTERPOLATORS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_t_1, ((PyObject *)__pyx_v_interpolator)))); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":34
 *     if interpolator not in VALID_INTERPOLATORS:
 *         raise ValueError(
 *             'Interpolator must be one of {}'.format(VALID_INTERPOLATORS)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_2), __pyx_n_s__format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__VALID_INTERPOLATORS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":38
 * 
 *     # convert rate_helpers list to std::vetor
 *     cdef vector[shared_ptr[RateHelper]]* curve_inputs = new vector[shared_ptr[RateHelper]]()             # <<<<<<<<<<<<<<
 *     for helper in rate_helpers:
 *         curve_inputs.push_back( deref((<RateHelper>helper)._thisptr))
 */
  __pyx_v_curve_inputs = new std::vector<boost::shared_ptr<struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper *> >();

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":39
 *     # convert rate_helpers list to std::vetor
 *     cdef vector[shared_ptr[RateHelper]]* curve_inputs = new vector[shared_ptr[RateHelper]]()
 *     for helper in rate_helpers:             # <<<<<<<<<<<<<<
 *         curve_inputs.push_back( deref((<RateHelper>helper)._thisptr))
 * 
 */
  if (PyList_CheckExact(__pyx_v_rate_helpers) || PyTuple_CheckExact(__pyx_v_rate_helpers)) {
    __pyx_t_3 = __pyx_v_rate_helpers; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_rate_helpers); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++;
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++;
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_helper);
    __pyx_v_helper = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":40
 *     cdef vector[shared_ptr[RateHelper]]* curve_inputs = new vector[shared_ptr[RateHelper]]()
 *     for helper in rate_helpers:
 *         curve_inputs.push_back( deref((<RateHelper>helper)._thisptr))             # <<<<<<<<<<<<<<
 * 
 *     # convert the Python str to C++ string
 */
    __pyx_v_curve_inputs->push_back(((boost::shared_ptr<struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper *> &)(*((struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper *)__pyx_v_helper)->_thisptr)));
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":43
 * 
 *     # convert the Python str to C++ string
 *     cdef string traits_string = string(PyString_AsString(traits))             # <<<<<<<<<<<<<<
 *     cdef string interpolator_string = string(PyString_AsString(interpolator)),
 * 
 */
  __pyx_t_7 = PyString_AsString(((PyObject *)__pyx_v_traits)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_traits_string = std::string(__pyx_t_7);

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":44
 *     # convert the Python str to C++ string
 *     cdef string traits_string = string(PyString_AsString(traits))
 *     cdef string interpolator_string = string(PyString_AsString(interpolator)),             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_ff.YieldTermStructure] ts_ptr = _pyc.term_structure_factory(
 */
  __pyx_t_7 = PyString_AsString(((PyObject *)__pyx_v_interpolator)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_interpolator_string = std::string(__pyx_t_7);

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":53
 *         deref(day_counter._thisptr),
 *         tolerance
 *     )             # <<<<<<<<<<<<<<
 * 
 *     term_structure = YieldTermStructure(relinkable=False)
 */
  try {__pyx_t_8 = QuantLib::term_structure_factory(__pyx_v_traits_string, __pyx_v_interpolator_string, (*__pyx_v_settlement_date->_thisptr->get()), ((std::vector<boost::shared_ptr<QuantLib::RateHelper> > &)(*__pyx_v_curve_inputs)), (*__pyx_v_day_counter->_thisptr), __pyx_v_tolerance);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_ts_ptr = __pyx_t_8;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":55
 *     )
 * 
 *     term_structure = YieldTermStructure(relinkable=False)             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_ff.YieldTermStructure]* s_pt = new shared_ptr[_ff.YieldTermStructure](ts_ptr)
 *     term_structure._thisptr = s_pt
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__relinkable), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_term_structure = ((struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":56
 * 
 *     term_structure = YieldTermStructure(relinkable=False)
 *     cdef shared_ptr[_ff.YieldTermStructure]* s_pt = new shared_ptr[_ff.YieldTermStructure](ts_ptr)             # <<<<<<<<<<<<<<
 *     term_structure._thisptr = s_pt
 *     return term_structure
 */
  __pyx_v_s_pt = new boost::shared_ptr<QuantLib::YieldTermStructure>(__pyx_v_ts_ptr);

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":57
 *     term_structure = YieldTermStructure(relinkable=False)
 *     cdef shared_ptr[_ff.YieldTermStructure]* s_pt = new shared_ptr[_ff.YieldTermStructure](ts_ptr)
 *     term_structure._thisptr = s_pt             # <<<<<<<<<<<<<<
 *     return term_structure
 * 
 */
  __pyx_v_term_structure->_thisptr = __pyx_v_s_pt;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":58
 *     cdef shared_ptr[_ff.YieldTermStructure]* s_pt = new shared_ptr[_ff.YieldTermStructure](ts_ptr)
 *     term_structure._thisptr = s_pt
 *     return term_structure             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_term_structure));
  __pyx_r = ((PyObject *)__pyx_v_term_structure);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pybg.quantlib.termstructures.yields.piecewise_yield_curve.term_structure_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_helper);
  __Pyx_XDECREF((PyObject *)__pyx_v_term_structure);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("piecewise_yield_curve"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_n_s__VALID_INTERPOLATORS, __pyx_k__VALID_INTERPOLATORS, sizeof(__pyx_k__VALID_INTERPOLATORS), 0, 0, 1, 1},
  {&__pyx_n_s__VALID_TRAITS, __pyx_k__VALID_TRAITS, sizeof(__pyx_k__VALID_TRAITS), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__curve_inputs, __pyx_k__curve_inputs, sizeof(__pyx_k__curve_inputs), 0, 0, 1, 1},
  {&__pyx_n_s__day_counter, __pyx_k__day_counter, sizeof(__pyx_k__day_counter), 0, 0, 1, 1},
  {&__pyx_n_s__discount, __pyx_k__discount, sizeof(__pyx_k__discount), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__forward, __pyx_k__forward, sizeof(__pyx_k__forward), 0, 0, 1, 1},
  {&__pyx_n_s__helper, __pyx_k__helper, sizeof(__pyx_k__helper), 0, 0, 1, 1},
  {&__pyx_n_s__interpolator, __pyx_k__interpolator, sizeof(__pyx_k__interpolator), 0, 0, 1, 1},
  {&__pyx_n_s__interpolator_string, __pyx_k__interpolator_string, sizeof(__pyx_k__interpolator_string), 0, 0, 1, 1},
  {&__pyx_n_s__linear, __pyx_k__linear, sizeof(__pyx_k__linear), 0, 0, 1, 1},
  {&__pyx_n_s__loglinear, __pyx_k__loglinear, sizeof(__pyx_k__loglinear), 0, 0, 1, 1},
  {&__pyx_n_s__rate_helpers, __pyx_k__rate_helpers, sizeof(__pyx_k__rate_helpers), 0, 0, 1, 1},
  {&__pyx_n_s__relinkable, __pyx_k__relinkable, sizeof(__pyx_k__relinkable), 0, 0, 1, 1},
  {&__pyx_n_s__s_pt, __pyx_k__s_pt, sizeof(__pyx_k__s_pt), 0, 0, 1, 1},
  {&__pyx_n_s__settlement_date, __pyx_k__settlement_date, sizeof(__pyx_k__settlement_date), 0, 0, 1, 1},
  {&__pyx_n_s__spline, __pyx_k__spline, sizeof(__pyx_k__spline), 0, 0, 1, 1},
  {&__pyx_n_s__term_structure, __pyx_k__term_structure, sizeof(__pyx_k__term_structure), 0, 0, 1, 1},
  {&__pyx_n_s__tolerance, __pyx_k__tolerance, sizeof(__pyx_k__tolerance), 0, 0, 1, 1},
  {&__pyx_n_s__traits, __pyx_k__traits, sizeof(__pyx_k__traits), 0, 0, 1, 1},
  {&__pyx_n_s__traits_string, __pyx_k__traits_string, sizeof(__pyx_k__traits_string), 0, 0, 1, 1},
  {&__pyx_n_s__ts_ptr, __pyx_k__ts_ptr, sizeof(__pyx_k__ts_ptr), 0, 0, 1, 1},
  {&__pyx_n_s__zero, __pyx_k__zero, sizeof(__pyx_k__zero), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_format = __Pyx_GetName(__pyx_b, __pyx_n_s__format); if (!__pyx_builtin_format) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":21
 * VALID_INTERPOLATORS = ['loglinear', 'linear', 'spline']
 * 
 * def term_structure_factory(str traits, str interpolator, Date settlement_date,             # <<<<<<<<<<<<<<
 *     rate_helpers, DayCounter day_counter, Real tolerance=1.0e-12):
 *     """ Returns a YieldTermStructure based on the piecewise yield curve information provided
 */
  __pyx_k_tuple_3 = PyTuple_New(13); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__traits));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_n_s__traits));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__traits));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__interpolator));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 1, ((PyObject *)__pyx_n_s__interpolator));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__interpolator));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__settlement_date));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 2, ((PyObject *)__pyx_n_s__settlement_date));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__settlement_date));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__rate_helpers));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 3, ((PyObject *)__pyx_n_s__rate_helpers));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__rate_helpers));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__day_counter));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 4, ((PyObject *)__pyx_n_s__day_counter));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__day_counter));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__tolerance));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 5, ((PyObject *)__pyx_n_s__tolerance));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__tolerance));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__curve_inputs));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 6, ((PyObject *)__pyx_n_s__curve_inputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__curve_inputs));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__helper));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 7, ((PyObject *)__pyx_n_s__helper));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__helper));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__traits_string));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 8, ((PyObject *)__pyx_n_s__traits_string));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__traits_string));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__interpolator_string));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 9, ((PyObject *)__pyx_n_s__interpolator_string));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__interpolator_string));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ts_ptr));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 10, ((PyObject *)__pyx_n_s__ts_ptr));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ts_ptr));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__term_structure));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 11, ((PyObject *)__pyx_n_s__term_structure));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__term_structure));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__s_pt));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 12, ((PyObject *)__pyx_n_s__s_pt));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__s_pt));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));
  __pyx_k_codeobj_4 = (PyObject*)__Pyx_PyCode_New(6, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_6, __pyx_n_s_5, 21, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpiecewise_yield_curve(void); /*proto*/
PyMODINIT_FUNC initpiecewise_yield_curve(void)
#else
PyMODINIT_FUNC PyInit_piecewise_yield_curve(void); /*proto*/
PyMODINIT_FUNC PyInit_piecewise_yield_curve(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_piecewise_yield_curve(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("piecewise_yield_curve"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pybg__quantlib__termstructures__yields__piecewise_yield_curve) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper = __Pyx_ImportType("pybg.quantlib.termstructures.yields.rate_helpers", "RateHelper", sizeof(struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RateHelper)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper = __Pyx_ImportType("pybg.quantlib.termstructures.yields.rate_helpers", "RelativeDateRateHelper", sizeof(struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12rate_helpers_RelativeDateRateHelper)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_4date_Period = __Pyx_ImportType("pybg.quantlib.time.date", "Period", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Period), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Period)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_4date_Date = __Pyx_ImportType("pybg.quantlib.time.date", "Date", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_4date_Date), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_4date_Date)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter = __Pyx_ImportType("pybg.quantlib.time.daycounter", "DayCounter", sizeof(struct __pyx_obj_4pybg_8quantlib_4time_10daycounter_DayCounter), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_4time_10daycounter_DayCounter)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure = __Pyx_ImportType("pybg.quantlib.termstructures.yields.yield_term_structure", "YieldTermStructure", sizeof(struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":18
 * from pybg.quantlib.termstructures.yields.yield_term_structure cimport YieldTermStructure
 * 
 * VALID_TRAITS = ['discount', 'forward', 'zero']             # <<<<<<<<<<<<<<
 * VALID_INTERPOLATORS = ['loglinear', 'linear', 'spline']
 * 
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__discount));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__discount));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__discount));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__forward));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__forward));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__forward));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__zero));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_n_s__zero));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__zero));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VALID_TRAITS, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":19
 * 
 * VALID_TRAITS = ['discount', 'forward', 'zero']
 * VALID_INTERPOLATORS = ['loglinear', 'linear', 'spline']             # <<<<<<<<<<<<<<
 * 
 * def term_structure_factory(str traits, str interpolator, Date settlement_date,
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__loglinear));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__loglinear));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__loglinear));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__linear));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__linear));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__linear));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__spline));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_n_s__spline));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__spline));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VALID_INTERPOLATORS, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":21
 * VALID_INTERPOLATORS = ['loglinear', 'linear', 'spline']
 * 
 * def term_structure_factory(str traits, str interpolator, Date settlement_date,             # <<<<<<<<<<<<<<
 *     rate_helpers, DayCounter day_counter, Real tolerance=1.0e-12):
 *     """ Returns a YieldTermStructure based on the piecewise yield curve information provided
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4pybg_8quantlib_14termstructures_6yields_21piecewise_yield_curve_1term_structure_factory, NULL, __pyx_n_s_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_5, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybg/quantlib/termstructures/yields/piecewise_yield_curve.pyx":1
 * include '../../types.pxi'             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pybg.quantlib.termstructures.yields.piecewise_yield_curve", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pybg.quantlib.termstructures.yields.piecewise_yield_curve");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    return;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && (size_t)((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
