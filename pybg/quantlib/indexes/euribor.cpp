/* Generated by Cython 0.16 on Sun Jul 22 16:12:25 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pybg__quantlib__indexes__euribor
#define __PYX_HAVE_API__pybg__quantlib__indexes__euribor
#include <vector>
#include "ql/time/frequency.hpp"
#include "ql/time/timeunit.hpp"
#include "ql/time/period.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "ostream"
#include "ql/time/weekday.hpp"
#include "ql/time/date.hpp"
#include "string"
#include "ql/time/businessdayconvention.hpp"
#include "ql/time/calendar.hpp"
#include "ql/time/calendars/target.hpp"
#include "ql/index.hpp"
#include "boost/shared_ptr.hpp"
#include "ql/handle.hpp"
#include "ql/time/daycounter.hpp"
#include "ql/time/daycounters/thirty360.hpp"
#include "ql/time/daycounters/actual360.hpp"
#include "ql/time/daycounters/actual365fixed.hpp"
#include "ql/time/daycounters/business252.hpp"
#include "ql/time/daycounters/one.hpp"
#include "ql/time/daycounters/simpledaycounter.hpp"
#include "ql/quote.hpp"
#include "ql/quotes/simplequote.hpp"
#include "ql/compounding.hpp"
#include "ql/termstructures/yieldtermstructure.hpp"
#include "ql/termstructures/yield/flatforward.hpp"
#include "ql/currency.hpp"
#include "ql/currencies/america.hpp"
#include "ql/currencies/europe.hpp"
#include "ql/indexes/interestrateindex.hpp"
#include "ql/indexes/iborindex.hpp"
#include "ql/indexes/ibor/euribor.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "euribor.pyx",
  "index.pxd",
  "interest_rate_index.pxd",
  "yield_term_structure.pxd",
  "flat_forward.pxd",
};

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_7_period_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_7_period_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_7_period_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_7_period_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_7_period_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_7_period_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_5_date_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_5_date_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_5_date_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_5_date_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_5_date_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_5_date_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_9_calendar_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_9_calendar_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_9_calendar_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_9_calendar_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_9_calendar_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_4time_11_daycounter_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_4time_11_daycounter_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_4time_11_daycounter_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/time/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_4time_11_daycounter_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_6_quote_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_6_quote_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_6_quote_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_6_quote_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_6_quote_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_6_quote_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/termstructures/yields/../../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_14termstructures_6yields_13_flat_forward_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_9_currency_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_9_currency_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_9_currency_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_9_currency_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_9_currency_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_9_currency_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_20_interest_rate_index_DiscountFactor;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":11
 * 
 * # from ql/types.hpp
 * ctypedef int Integer             # <<<<<<<<<<<<<<
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Integer;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":12
 * # from ql/types.hpp
 * ctypedef int Integer
 * ctypedef long BigInteger             # <<<<<<<<<<<<<<
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 */
typedef long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigInteger;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":13
 * ctypedef int Integer
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural             # <<<<<<<<<<<<<<
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 */
typedef unsigned int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Natural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":14
 * ctypedef long BigInteger
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural             # <<<<<<<<<<<<<<
 * ctypedef double Real
 * ctypedef double Decimal
 */
typedef unsigned long __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_BigNatural;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":15
 * ctypedef unsigned int Natural
 * ctypedef unsigned long BigNatural
 * ctypedef double Real             # <<<<<<<<<<<<<<
 * ctypedef double Decimal
 * ctypedef size_t Size
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Real;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":16
 * ctypedef unsigned long BigNatural
 * ctypedef double Real
 * ctypedef double Decimal             # <<<<<<<<<<<<<<
 * ctypedef size_t Size
 * ctypedef double Time
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Decimal;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":17
 * ctypedef double Real
 * ctypedef double Decimal
 * ctypedef size_t Size             # <<<<<<<<<<<<<<
 * ctypedef double Time
 * ctypedef double Rate
 */
typedef size_t __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Size;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":18
 * ctypedef double Decimal
 * ctypedef size_t Size
 * ctypedef double Time             # <<<<<<<<<<<<<<
 * ctypedef double Rate
 * ctypedef double Spread
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Time;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":19
 * ctypedef size_t Size
 * ctypedef double Time
 * ctypedef double Rate             # <<<<<<<<<<<<<<
 * ctypedef double Spread
 * ctypedef double Volatility
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Rate;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":20
 * ctypedef double Time
 * ctypedef double Rate
 * ctypedef double Spread             # <<<<<<<<<<<<<<
 * ctypedef double Volatility
 * ctypedef int Year
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Spread;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":21
 * ctypedef double Rate
 * ctypedef double Spread
 * ctypedef double Volatility             # <<<<<<<<<<<<<<
 * ctypedef int Year
 * ctypedef int Day
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Volatility;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":22
 * ctypedef double Spread
 * ctypedef double Volatility
 * ctypedef int Year             # <<<<<<<<<<<<<<
 * ctypedef int Day
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Year;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":23
 * ctypedef double Volatility
 * ctypedef int Year
 * ctypedef int Day             # <<<<<<<<<<<<<<
 * ctypedef double DiscountFactor
 */
typedef int __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_Day;

/* "/Users/bart/Documents/Projects/pybg/pybg/quantlib/indexes/../types.pxi":24
 * ctypedef int Year
 * ctypedef int Day
 * ctypedef double DiscountFactor             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_4pybg_8quantlib_7indexes_11_ibor_index_DiscountFactor;

/*--- Type declarations ---*/
struct __pyx_obj_4pybg_8quantlib_5index_Index;
struct __pyx_obj_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex;
struct __pyx_obj_4pybg_8quantlib_7indexes_10ibor_index_IborIndex;
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure;
struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor;
struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M;
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward;

/* "pybg/quantlib/index.pxd":13
 * from pybg.quantlib.handle cimport shared_ptr
 * 
 * cdef class Index:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_in.Index]* _thisptr
 * 
 */
struct __pyx_obj_4pybg_8quantlib_5index_Index {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::Index> *_thisptr;
};


/* "pybg/quantlib/indexes/interest_rate_index.pxd":12
 * from pybg.quantlib.index cimport Index
 * 
 * cdef class InterestRateIndex(Index):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex {
  struct __pyx_obj_4pybg_8quantlib_5index_Index __pyx_base;
};

struct __pyx_obj_4pybg_8quantlib_7indexes_10ibor_index_IborIndex {
  struct __pyx_obj_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex __pyx_base;
};


/* "pybg/quantlib/termstructures/yields/yield_term_structure.pxd":5
 * from pybg.quantlib.handle cimport shared_ptr, RelinkableHandle
 * 
 * cdef class YieldTermStructure:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[_ff.YieldTermStructure]* _thisptr
 *     cdef RelinkableHandle[_ff.YieldTermStructure]* _relinkable_ptr
 */
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure {
  PyObject_HEAD
  boost::shared_ptr<QuantLib::YieldTermStructure> *_thisptr;
  QuantLib::RelinkableHandle<QuantLib::YieldTermStructure> *_relinkable_ptr;
  bool relinkable;
};


/* "pybg/quantlib/indexes/euribor.pxd":3
 * from pybg.quantlib.indexes.ibor_index cimport IborIndex
 * 
 * cdef class Euribor(IborIndex):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor {
  struct __pyx_obj_4pybg_8quantlib_7indexes_10ibor_index_IborIndex __pyx_base;
};


/* "pybg/quantlib/indexes/euribor.pxd":6
 *     pass
 * 
 * cdef class Euribor6M(Euribor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M {
  struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor __pyx_base;
};


/* "pybg/quantlib/termstructures/yields/flat_forward.pxd":16
 * from pybg.quantlib.termstructures.yields.yield_term_structure cimport YieldTermStructure
 * 
 * cdef class FlatForward(YieldTermStructure):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward {
  struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure __pyx_base;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pybg.quantlib.time._period' */

/* Module declarations from 'pybg.quantlib.time._date' */

/* Module declarations from 'pybg.quantlib.time._calendar' */

/* Module declarations from 'pybg.quantlib._index' */

/* Module declarations from 'pybg.quantlib.handle' */

/* Module declarations from 'pybg.quantlib.index' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_5index_Index = 0;

/* Module declarations from 'pybg.quantlib.indexes.interest_rate_index' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex = 0;

/* Module declarations from 'pybg.quantlib.indexes.ibor_index' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex = 0;

/* Module declarations from 'pybg.quantlib.time._daycounter' */

/* Module declarations from 'pybg.quantlib._quote' */

/* Module declarations from 'pybg.quantlib.termstructures.yields._flat_forward' */

/* Module declarations from 'pybg.quantlib.termstructures.yields.yield_term_structure' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure = 0;

/* Module declarations from 'pybg.quantlib.termstructures.yields.flat_forward' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward = 0;

/* Module declarations from 'pybg.quantlib._currency' */

/* Module declarations from 'pybg.quantlib.indexes._interest_rate_index' */

/* Module declarations from 'pybg.quantlib.indexes._ibor_index' */

/* Module declarations from 'pybg.quantlib.indexes._euribor' */

/* Module declarations from 'pybg.quantlib.indexes.euribor' */
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_7indexes_7euribor_Euribor = 0;
static PyTypeObject *__pyx_ptype_4pybg_8quantlib_7indexes_7euribor_Euribor6M = 0;
#define __Pyx_MODULE_NAME "pybg.quantlib.indexes.euribor"
int __pyx_module_is_main_pybg__quantlib__indexes__euribor = 0;

/* Implementation of 'pybg.quantlib.indexes.euribor' */
static int __pyx_pf_4pybg_8quantlib_7indexes_7euribor_7Euribor___init__(CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor *__pyx_v_self); /* proto */
static int __pyx_pf_4pybg_8quantlib_7indexes_7euribor_9Euribor6M___init__(struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M *__pyx_v_self, struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *__pyx_v_yc); /* proto */
static char __pyx_k_2[] = "\n Copyright (C) 2011, Enthought Inc\n Copyright (C) 2011, Patrick Henaff\n\n This program is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n FOR A PARTICULAR PURPOSE.  See the license for more details.\n";
static char __pyx_k__yc[] = "yc";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__yc;
static struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *__pyx_k_1;

/* Python wrapper */
static int __pyx_pw_4pybg_8quantlib_7indexes_7euribor_7Euribor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_8quantlib_7indexes_7euribor_7Euribor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4pybg_8quantlib_7indexes_7euribor_7Euribor___init__(((struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/quantlib/indexes/euribor.pyx":20
 * 
 * cdef class Euribor(IborIndex):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static int __pyx_pf_4pybg_8quantlib_7indexes_7euribor_7Euribor___init__(CYTHON_UNUSED struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4pybg_8quantlib_7indexes_7euribor_9Euribor6M_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4pybg_8quantlib_7indexes_7euribor_9Euribor6M_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *__pyx_v_yc = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__yc,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject* values[1] = {0};
    values[0] = (PyObject *)__pyx_k_1;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__yc);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_yc = ((struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybg.quantlib.indexes.euribor.Euribor6M.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_yc), __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure, 1, "yc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4pybg_8quantlib_7indexes_7euribor_9Euribor6M___init__(((struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M *)__pyx_v_self), __pyx_v_yc);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybg/quantlib/indexes/euribor.pyx":24
 * 
 * cdef class Euribor6M(Euribor):
 *     def __init__(self, YieldTermStructure yc=YieldTermStructure()):             # <<<<<<<<<<<<<<
 * 
 *         cdef Handle[_ff.YieldTermStructure]* yc_handle = new \
 */

static int __pyx_pf_4pybg_8quantlib_7indexes_7euribor_9Euribor6M___init__(struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M *__pyx_v_self, struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *__pyx_v_yc) {
  QuantLib::Handle<QuantLib::YieldTermStructure> *__pyx_v_yc_handle;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybg/quantlib/indexes/euribor.pyx":28
 *         cdef Handle[_ff.YieldTermStructure]* yc_handle = new \
 *                 Handle[_ff.YieldTermStructure](
 *                    <_ff.YieldTermStructure*> yc._thisptr.get())             # <<<<<<<<<<<<<<
 * 
 *         self._thisptr = new shared_ptr[_in.Index](
 */
  __pyx_v_yc_handle = new QuantLib::Handle<QuantLib::YieldTermStructure>(((QuantLib::YieldTermStructure *)__pyx_v_yc->_thisptr->get()));

  /* "pybg/quantlib/indexes/euribor.pyx":30
 *                    <_ff.YieldTermStructure*> yc._thisptr.get())
 * 
 *         self._thisptr = new shared_ptr[_in.Index](             # <<<<<<<<<<<<<<
 *             new _eu.Euribor6M(deref(yc_handle)))
 * 
 */
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._thisptr = new boost::shared_ptr<QuantLib::Index>(new QuantLib::Euribor6M((*__pyx_v_yc_handle)));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4pybg_8quantlib_7indexes_7euribor_Euribor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex->tp_new(t, a, k);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4pybg_8quantlib_7indexes_7euribor_Euribor(PyObject *o) {
  __pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex->tp_dealloc(o);
}

static PyMethodDef __pyx_methods_4pybg_8quantlib_7indexes_7euribor_Euribor[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Euribor = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Euribor = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Euribor = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Euribor = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.quantlib.indexes.euribor.Euribor"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_8quantlib_7indexes_7euribor_Euribor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Euribor, /*tp_as_number*/
  &__pyx_tp_as_sequence_Euribor, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Euribor, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Euribor, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_8quantlib_7indexes_7euribor_Euribor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_8quantlib_7indexes_7euribor_7Euribor_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_8quantlib_7indexes_7euribor_Euribor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4pybg_8quantlib_7indexes_7euribor_Euribor6M(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4pybg_8quantlib_7indexes_7euribor_Euribor(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_4pybg_8quantlib_7indexes_7euribor_Euribor6M[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Euribor6M = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Euribor6M = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Euribor6M = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Euribor6M = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor6M = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pybg.quantlib.indexes.euribor.Euribor6M"), /*tp_name*/
  sizeof(struct __pyx_obj_4pybg_8quantlib_7indexes_7euribor_Euribor6M), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4pybg_8quantlib_7indexes_7euribor_Euribor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Euribor6M, /*tp_as_number*/
  &__pyx_tp_as_sequence_Euribor6M, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Euribor6M, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Euribor6M, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4pybg_8quantlib_7indexes_7euribor_Euribor6M, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4pybg_8quantlib_7indexes_7euribor_9Euribor6M_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4pybg_8quantlib_7indexes_7euribor_Euribor6M, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("euribor"),
    __Pyx_DOCSTR(__pyx_k_2), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__yc, __pyx_k__yc, sizeof(__pyx_k__yc), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initeuribor(void); /*proto*/
PyMODINIT_FUNC initeuribor(void)
#else
PyMODINIT_FUNC PyInit_euribor(void); /*proto*/
PyMODINIT_FUNC PyInit_euribor(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_euribor(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("euribor"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_2), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pybg__quantlib__indexes__euribor) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex = __Pyx_ImportType("pybg.quantlib.indexes.ibor_index", "IborIndex", sizeof(struct __pyx_obj_4pybg_8quantlib_7indexes_10ibor_index_IborIndex), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor.tp_base = __pyx_ptype_4pybg_8quantlib_7indexes_10ibor_index_IborIndex;
  if (PyType_Ready(&__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Euribor", (PyObject *)&__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_7indexes_7euribor_Euribor = &__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor;
  __pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor6M.tp_base = __pyx_ptype_4pybg_8quantlib_7indexes_7euribor_Euribor;
  if (PyType_Ready(&__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor6M) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Euribor6M", (PyObject *)&__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor6M) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_7indexes_7euribor_Euribor6M = &__pyx_type_4pybg_8quantlib_7indexes_7euribor_Euribor6M;
  /*--- Type import code ---*/
  __pyx_ptype_4pybg_8quantlib_5index_Index = __Pyx_ImportType("pybg.quantlib.index", "Index", sizeof(struct __pyx_obj_4pybg_8quantlib_5index_Index), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_5index_Index)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex = __Pyx_ImportType("pybg.quantlib.indexes.interest_rate_index", "InterestRateIndex", sizeof(struct __pyx_obj_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_7indexes_19interest_rate_index_InterestRateIndex)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure = __Pyx_ImportType("pybg.quantlib.termstructures.yields.yield_term_structure", "YieldTermStructure", sizeof(struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward = __Pyx_ImportType("pybg.quantlib.termstructures.yields.flat_forward", "FlatForward", sizeof(struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward), 1); if (unlikely(!__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_12flat_forward_FlatForward)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pybg/quantlib/indexes/euribor.pyx":24
 * 
 * cdef class Euribor6M(Euribor):
 *     def __init__(self, YieldTermStructure yc=YieldTermStructure()):             # <<<<<<<<<<<<<<
 * 
 *         cdef Handle[_ff.YieldTermStructure]* yc_handle = new \
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_1 = ((struct __pyx_obj_4pybg_8quantlib_14termstructures_6yields_20yield_term_structure_YieldTermStructure *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybg/quantlib/indexes/euribor.pyx":1
 * """             # <<<<<<<<<<<<<<
 *  Copyright (C) 2011, Enthought Inc
 *  Copyright (C) 2011, Patrick Henaff
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pybg.quantlib.indexes.euribor", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pybg.quantlib.indexes.euribor");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && (size_t)((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
